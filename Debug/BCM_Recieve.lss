
BCM_Recieve.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000014ee  00001582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000038  0080006e  0080006e  00001590  2**0
                  ALLOC
  3 .stab         00001bcc  00000000  00000000  00001590  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  0000315c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000036e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e85  00000000  00000000  00003840  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e6  00000000  00000000  000056c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078e  00000000  00000000  00005eab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  0000663c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f69  00000000  00000000  00007220  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c76  00000000  00000000  00008189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_1>
       8:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_2>
       c:	0c 94 bb 01 	jmp	0x376	; 0x376 <__vector_3>
      10:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_4>
      14:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_5>
      18:	0c 94 30 02 	jmp	0x460	; 0x460 <__vector_6>
      1c:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_7>
      20:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_8>
      24:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__vector_9>
      28:	0c 94 cc 02 	jmp	0x598	; 0x598 <__vector_10>
      2c:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__vector_11>
      30:	0c 94 1a 03 	jmp	0x634	; 0x634 <__vector_12>
      34:	0c 94 41 03 	jmp	0x682	; 0x682 <__vector_13>
      38:	0c 94 68 03 	jmp	0x6d0	; 0x6d0 <__vector_14>
      3c:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__vector_15>
      40:	0c 94 b6 03 	jmp	0x76c	; 0x76c <__vector_16>
      44:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_17>
      48:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_18>
      4c:	0c 94 2b 04 	jmp	0x856	; 0x856 <__vector_19>
      50:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "SPI_Config.h"
volatile uint8_t u8_DATA='R';
volatile uint8_t u8_interrupt_spi=0;
int main(void)
{
	Led_Init(LED_0);
      92:	80 e0       	ldi	r24, 0x00	; 0
      94:	0e 94 79 04 	call	0x8f2	; 0x8f2 <Led_Init>
	//uint8_t data_sent='M';
	//uint8_t flag=0;
	gpioPinDirection(GPIOB,BIT3,OUTPUT);
      98:	81 e0       	ldi	r24, 0x01	; 1
      9a:	68 e0       	ldi	r22, 0x08	; 8
      9c:	4f ef       	ldi	r20, 0xFF	; 255
      9e:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
	Uart_Init(Baud9600,OneStopBit,NoParity,EightBits,ASynchronous);
      a2:	87 e6       	ldi	r24, 0x67	; 103
      a4:	60 e0       	ldi	r22, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	23 e0       	ldi	r18, 0x03	; 3
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0e 94 7e 08 	call	0x10fc	; 0x10fc <Uart_Init>
	Enable_communication_interrupt();
      b0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <Enable_communication_interrupt>
//	Led_On(LED_0);
	SPI_Init();
      b4:	0e 94 84 05 	call	0xb08	; 0xb08 <SPI_Init>
      b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x26>

000000ba <gpioPortDirection>:
 * @param value: set the port value and takes the following values
 * 				- 0x00 -> Low
 * 				- 0xff -> High
 */

switch (u8_port)	
      ba:	81 30       	cpi	r24, 0x01	; 1
      bc:	49 f0       	breq	.+18     	; 0xd0 <gpioPortDirection+0x16>
      be:	81 30       	cpi	r24, 0x01	; 1
      c0:	28 f0       	brcs	.+10     	; 0xcc <gpioPortDirection+0x12>
      c2:	82 30       	cpi	r24, 0x02	; 2
      c4:	39 f0       	breq	.+14     	; 0xd4 <gpioPortDirection+0x1a>
      c6:	83 30       	cpi	r24, 0x03	; 3
      c8:	41 f4       	brne	.+16     	; 0xda <gpioPortDirection+0x20>
      ca:	06 c0       	rjmp	.+12     	; 0xd8 <gpioPortDirection+0x1e>
{	case GPIOA:
	PORTA_DIR = u8_direction;
      cc:	6a bb       	out	0x1a, r22	; 26
	break;
      ce:	08 95       	ret
	case GPIOB:
	PORTB_DIR = u8_direction;
      d0:	67 bb       	out	0x17, r22	; 23
	break;
      d2:	08 95       	ret
	case GPIOC:
	PORTC_DIR = u8_direction;
      d4:	64 bb       	out	0x14, r22	; 20
	break;
      d6:	08 95       	ret
	case GPIOD:
	PORTD_DIR = u8_direction;
      d8:	61 bb       	out	0x11, r22	; 17
      da:	08 95       	ret

000000dc <gpioPortWrite>:
}

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
	
switch (u8_port)	
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	49 f0       	breq	.+18     	; 0xf2 <gpioPortWrite+0x16>
      e0:	81 30       	cpi	r24, 0x01	; 1
      e2:	28 f0       	brcs	.+10     	; 0xee <gpioPortWrite+0x12>
      e4:	82 30       	cpi	r24, 0x02	; 2
      e6:	39 f0       	breq	.+14     	; 0xf6 <gpioPortWrite+0x1a>
      e8:	83 30       	cpi	r24, 0x03	; 3
      ea:	41 f4       	brne	.+16     	; 0xfc <gpioPortWrite+0x20>
      ec:	06 c0       	rjmp	.+12     	; 0xfa <gpioPortWrite+0x1e>
{	case GPIOA:
	PORTA_DATA = u8_value;
      ee:	6b bb       	out	0x1b, r22	; 27
	break;
      f0:	08 95       	ret
	case GPIOB:
	PORTB_DATA = u8_value;
      f2:	68 bb       	out	0x18, r22	; 24
	break;
      f4:	08 95       	ret
	case GPIOC:
	PORTC_DATA = u8_value;
      f6:	65 bb       	out	0x15, r22	; 21
	break;
      f8:	08 95       	ret
	case GPIOD:
	PORTD_DATA = u8_value;
      fa:	62 bb       	out	0x12, r22	; 18
      fc:	08 95       	ret

000000fe <gpioPortToggle>:
	
}
void gpioPortToggle(uint8_t u8_port)
{
	
switch (u8_port)	
      fe:	81 30       	cpi	r24, 0x01	; 1
     100:	59 f0       	breq	.+22     	; 0x118 <gpioPortToggle+0x1a>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	28 f0       	brcs	.+10     	; 0x110 <gpioPortToggle+0x12>
     106:	82 30       	cpi	r24, 0x02	; 2
     108:	59 f0       	breq	.+22     	; 0x120 <gpioPortToggle+0x22>
     10a:	83 30       	cpi	r24, 0x03	; 3
     10c:	81 f4       	brne	.+32     	; 0x12e <gpioPortToggle+0x30>
     10e:	0c c0       	rjmp	.+24     	; 0x128 <gpioPortToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^= HIGH;
     110:	8b b3       	in	r24, 0x1b	; 27
     112:	80 95       	com	r24
     114:	8b bb       	out	0x1b, r24	; 27
	break;
     116:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^= HIGH;
     118:	88 b3       	in	r24, 0x18	; 24
     11a:	80 95       	com	r24
     11c:	88 bb       	out	0x18, r24	; 24
	break;
     11e:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^= HIGH;
     120:	85 b3       	in	r24, 0x15	; 21
     122:	80 95       	com	r24
     124:	85 bb       	out	0x15, r24	; 21
	break;
     126:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^= HIGH;
     128:	82 b3       	in	r24, 0x12	; 18
     12a:	80 95       	com	r24
     12c:	82 bb       	out	0x12, r24	; 18
     12e:	08 95       	ret

00000130 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
	
switch (u8_port)	
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	49 f0       	breq	.+18     	; 0x146 <gpioPortRead+0x16>
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	28 f0       	brcs	.+10     	; 0x142 <gpioPortRead+0x12>
     138:	82 30       	cpi	r24, 0x02	; 2
     13a:	39 f0       	breq	.+14     	; 0x14a <gpioPortRead+0x1a>
     13c:	83 30       	cpi	r24, 0x03	; 3
     13e:	49 f4       	brne	.+18     	; 0x152 <gpioPortRead+0x22>
     140:	06 c0       	rjmp	.+12     	; 0x14e <gpioPortRead+0x1e>
{	case GPIOA:
	U8_ret_Port_data=PORTA_DATA & HIGH;
     142:	8b b3       	in	r24, 0x1b	; 27
	break;
     144:	08 95       	ret
	case GPIOB:
	U8_ret_Port_data=PORTB_DATA & HIGH;
     146:	88 b3       	in	r24, 0x18	; 24
	break;
     148:	08 95       	ret
	case GPIOC:
	U8_ret_Port_data=PORTC_DATA & HIGH;
     14a:	85 b3       	in	r24, 0x15	; 21
	break;
     14c:	08 95       	ret
	case GPIOD:
	U8_ret_Port_data=PORTD_DATA & HIGH;
     14e:	82 b3       	in	r24, 0x12	; 18
	break;
     150:	08 95       	ret
	
}

uint8_t gpioPortRead(uint8_t u8_port)
{
	uint8_t U8_ret_Port_data=0;
     152:	80 e0       	ldi	r24, 0x00	; 0
	break;
	
}

return 	U8_ret_Port_data;
}
     154:	08 95       	ret

00000156 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
switch(u8_direction){
     156:	44 23       	and	r20, r20
     158:	19 f0       	breq	.+6      	; 0x160 <gpioPinDirection+0xa>
     15a:	4f 3f       	cpi	r20, 0xFF	; 255
     15c:	d1 f5       	brne	.+116    	; 0x1d2 <gpioPinDirection+0x7c>
     15e:	21 c0       	rjmp	.+66     	; 0x1a2 <gpioPinDirection+0x4c>
case INPUT:
{
switch (u8_port)	
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	69 f0       	breq	.+26     	; 0x17e <gpioPinDirection+0x28>
     164:	81 30       	cpi	r24, 0x01	; 1
     166:	28 f0       	brcs	.+10     	; 0x172 <gpioPinDirection+0x1c>
     168:	82 30       	cpi	r24, 0x02	; 2
     16a:	79 f0       	breq	.+30     	; 0x18a <gpioPinDirection+0x34>
     16c:	83 30       	cpi	r24, 0x03	; 3
     16e:	c9 f4       	brne	.+50     	; 0x1a2 <gpioPinDirection+0x4c>
     170:	12 c0       	rjmp	.+36     	; 0x196 <gpioPinDirection+0x40>
{	case GPIOA:
	PORTA_DIR &=(~u8_pins);   // 0b01111111
     172:	8a b3       	in	r24, 0x1a	; 26
     174:	96 2f       	mov	r25, r22
     176:	90 95       	com	r25
     178:	89 23       	and	r24, r25
     17a:	8a bb       	out	0x1a, r24	; 26
     17c:	1b c0       	rjmp	.+54     	; 0x1b4 <gpioPinDirection+0x5e>
	break;
	case GPIOB:
	PORTB_DIR &=(~u8_pins);
     17e:	87 b3       	in	r24, 0x17	; 23
     180:	96 2f       	mov	r25, r22
     182:	90 95       	com	r25
     184:	89 23       	and	r24, r25
     186:	87 bb       	out	0x17, r24	; 23
     188:	19 c0       	rjmp	.+50     	; 0x1bc <gpioPinDirection+0x66>
	break;
	case GPIOC:
	PORTC_DIR &=(~u8_pins);
     18a:	84 b3       	in	r24, 0x14	; 20
     18c:	96 2f       	mov	r25, r22
     18e:	90 95       	com	r25
     190:	89 23       	and	r24, r25
     192:	84 bb       	out	0x14, r24	; 20
     194:	17 c0       	rjmp	.+46     	; 0x1c4 <gpioPinDirection+0x6e>
	break;
	case GPIOD:
	PORTD_DIR &=(~u8_pins);
     196:	81 b3       	in	r24, 0x11	; 17
     198:	96 2f       	mov	r25, r22
     19a:	90 95       	com	r25
     19c:	89 23       	and	r24, r25
     19e:	81 bb       	out	0x11, r24	; 17
     1a0:	15 c0       	rjmp	.+42     	; 0x1cc <gpioPinDirection+0x76>
	break;
	
}
}
case OUTPUT:{
switch (u8_port)	
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	59 f0       	breq	.+22     	; 0x1bc <gpioPinDirection+0x66>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	28 f0       	brcs	.+10     	; 0x1b4 <gpioPinDirection+0x5e>
     1aa:	82 30       	cpi	r24, 0x02	; 2
     1ac:	59 f0       	breq	.+22     	; 0x1c4 <gpioPinDirection+0x6e>
     1ae:	83 30       	cpi	r24, 0x03	; 3
     1b0:	81 f4       	brne	.+32     	; 0x1d2 <gpioPinDirection+0x7c>
     1b2:	0c c0       	rjmp	.+24     	; 0x1cc <gpioPinDirection+0x76>
{	case GPIOA:
	PORTA_DIR |=(u8_pins);
     1b4:	8a b3       	in	r24, 0x1a	; 26
     1b6:	68 2b       	or	r22, r24
     1b8:	6a bb       	out	0x1a, r22	; 26
	break;
     1ba:	08 95       	ret
	case GPIOB:
	PORTB_DIR |=(u8_pins);
     1bc:	87 b3       	in	r24, 0x17	; 23
     1be:	68 2b       	or	r22, r24
     1c0:	67 bb       	out	0x17, r22	; 23
	break;
     1c2:	08 95       	ret
	case GPIOC:
	PORTC_DIR |=(u8_pins);
     1c4:	84 b3       	in	r24, 0x14	; 20
     1c6:	68 2b       	or	r22, r24
     1c8:	64 bb       	out	0x14, r22	; 20
	break;
     1ca:	08 95       	ret
	case GPIOD:
	PORTD_DIR |=(u8_pins);
     1cc:	81 b3       	in	r24, 0x11	; 17
     1ce:	68 2b       	or	r22, r24
     1d0:	61 bb       	out	0x11, r22	; 17
     1d2:	08 95       	ret

000001d4 <gpioPinWrite>:
	
	
}

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{switch(u8_value){
     1d4:	44 23       	and	r20, r20
     1d6:	19 f0       	breq	.+6      	; 0x1de <gpioPinWrite+0xa>
     1d8:	4f 3f       	cpi	r20, 0xFF	; 255
     1da:	b1 f5       	brne	.+108    	; 0x248 <gpioPinWrite+0x74>
     1dc:	1d c0       	rjmp	.+58     	; 0x218 <gpioPinWrite+0x44>
case LOW:
{
switch (u8_port)	
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	61 f0       	breq	.+24     	; 0x1fa <gpioPinWrite+0x26>
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	28 f0       	brcs	.+10     	; 0x1f0 <gpioPinWrite+0x1c>
     1e6:	82 30       	cpi	r24, 0x02	; 2
     1e8:	69 f0       	breq	.+26     	; 0x204 <gpioPinWrite+0x30>
     1ea:	83 30       	cpi	r24, 0x03	; 3
     1ec:	69 f5       	brne	.+90     	; 0x248 <gpioPinWrite+0x74>
     1ee:	0f c0       	rjmp	.+30     	; 0x20e <gpioPinWrite+0x3a>
{	case GPIOA:
	PORTA_DATA &= ~(u8_pins);   // 0b01111111
     1f0:	8b b3       	in	r24, 0x1b	; 27
     1f2:	60 95       	com	r22
     1f4:	68 23       	and	r22, r24
     1f6:	6b bb       	out	0x1b, r22	; 27
	break;
     1f8:	08 95       	ret
	case GPIOB:
	PORTB_DATA &= ~(u8_pins);
     1fa:	88 b3       	in	r24, 0x18	; 24
     1fc:	60 95       	com	r22
     1fe:	68 23       	and	r22, r24
     200:	68 bb       	out	0x18, r22	; 24
	break;
     202:	08 95       	ret
	case GPIOC:
	PORTC_DATA &= ~(u8_pins);
     204:	85 b3       	in	r24, 0x15	; 21
     206:	60 95       	com	r22
     208:	68 23       	and	r22, r24
     20a:	65 bb       	out	0x15, r22	; 21
	break;
     20c:	08 95       	ret
	case GPIOD:
	PORTD_DATA &= ~(u8_pins);
     20e:	82 b3       	in	r24, 0x12	; 18
     210:	60 95       	com	r22
     212:	68 23       	and	r22, r24
     214:	62 bb       	out	0x12, r22	; 18
	break;
     216:	08 95       	ret
	
}
break;
}
case HIGH:{
switch (u8_port)	
     218:	81 30       	cpi	r24, 0x01	; 1
     21a:	59 f0       	breq	.+22     	; 0x232 <gpioPinWrite+0x5e>
     21c:	81 30       	cpi	r24, 0x01	; 1
     21e:	28 f0       	brcs	.+10     	; 0x22a <gpioPinWrite+0x56>
     220:	82 30       	cpi	r24, 0x02	; 2
     222:	59 f0       	breq	.+22     	; 0x23a <gpioPinWrite+0x66>
     224:	83 30       	cpi	r24, 0x03	; 3
     226:	81 f4       	brne	.+32     	; 0x248 <gpioPinWrite+0x74>
     228:	0c c0       	rjmp	.+24     	; 0x242 <gpioPinWrite+0x6e>
{	case GPIOA:
	PORTA_DATA |=(u8_pins);
     22a:	8b b3       	in	r24, 0x1b	; 27
     22c:	68 2b       	or	r22, r24
     22e:	6b bb       	out	0x1b, r22	; 27
	break;
     230:	08 95       	ret
	case GPIOB:
	PORTB_DATA |=(u8_pins);
     232:	88 b3       	in	r24, 0x18	; 24
     234:	68 2b       	or	r22, r24
     236:	68 bb       	out	0x18, r22	; 24
	break;
     238:	08 95       	ret
	case GPIOC:
	PORTC_DATA |=(u8_pins);
     23a:	85 b3       	in	r24, 0x15	; 21
     23c:	68 2b       	or	r22, r24
     23e:	65 bb       	out	0x15, r22	; 21
	break;
     240:	08 95       	ret
	case GPIOD:
	PORTD_DATA |=(u8_pins);
     242:	82 b3       	in	r24, 0x12	; 18
     244:	68 2b       	or	r22, r24
     246:	62 bb       	out	0x12, r22	; 18
     248:	08 95       	ret

0000024a <gpioPinToggle>:
}

}
void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
switch (u8_port)	
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	59 f0       	breq	.+22     	; 0x264 <gpioPinToggle+0x1a>
     24e:	81 30       	cpi	r24, 0x01	; 1
     250:	28 f0       	brcs	.+10     	; 0x25c <gpioPinToggle+0x12>
     252:	82 30       	cpi	r24, 0x02	; 2
     254:	59 f0       	breq	.+22     	; 0x26c <gpioPinToggle+0x22>
     256:	83 30       	cpi	r24, 0x03	; 3
     258:	81 f4       	brne	.+32     	; 0x27a <gpioPinToggle+0x30>
     25a:	0c c0       	rjmp	.+24     	; 0x274 <gpioPinToggle+0x2a>
{	case GPIOA:
	PORTA_DATA ^=(u8_pins);
     25c:	8b b3       	in	r24, 0x1b	; 27
     25e:	68 27       	eor	r22, r24
     260:	6b bb       	out	0x1b, r22	; 27
	break;
     262:	08 95       	ret
	case GPIOB:
	PORTB_DATA ^=(u8_pins);
     264:	88 b3       	in	r24, 0x18	; 24
     266:	68 27       	eor	r22, r24
     268:	68 bb       	out	0x18, r22	; 24
	break;
     26a:	08 95       	ret
	case GPIOC:
	PORTC_DATA ^=(u8_pins);
     26c:	85 b3       	in	r24, 0x15	; 21
     26e:	68 27       	eor	r22, r24
     270:	65 bb       	out	0x15, r22	; 21
	break;
     272:	08 95       	ret
	case GPIOD:
	PORTD_DATA ^=(u8_pins);
     274:	82 b3       	in	r24, 0x12	; 18
     276:	68 27       	eor	r22, r24
     278:	62 bb       	out	0x12, r22	; 18
     27a:	08 95       	ret

0000027c <gpioPinRead>:
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
switch (u8_port)	
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	51 f0       	breq	.+20     	; 0x294 <gpioPinRead+0x18>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	28 f0       	brcs	.+10     	; 0x28e <gpioPinRead+0x12>
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	49 f0       	breq	.+18     	; 0x29a <gpioPinRead+0x1e>
     288:	83 30       	cpi	r24, 0x03	; 3
     28a:	69 f4       	brne	.+26     	; 0x2a6 <gpioPinRead+0x2a>
     28c:	09 c0       	rjmp	.+18     	; 0x2a0 <gpioPinRead+0x24>
{	case GPIOA:
	U8_ret_BIT_data=(PORTA_PIN & u8_pin);
     28e:	89 b3       	in	r24, 0x19	; 25
     290:	68 23       	and	r22, r24
	break;
     292:	0a c0       	rjmp	.+20     	; 0x2a8 <gpioPinRead+0x2c>
	case GPIOB:
	U8_ret_BIT_data=(PORTB_PIN & u8_pin);
     294:	86 b3       	in	r24, 0x16	; 22
     296:	68 23       	and	r22, r24
	break;
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <gpioPinRead+0x2c>
	case GPIOC:
	U8_ret_BIT_data=(PORTC_PIN & u8_pin);
     29a:	83 b3       	in	r24, 0x13	; 19
     29c:	68 23       	and	r22, r24
	break;
     29e:	04 c0       	rjmp	.+8      	; 0x2a8 <gpioPinRead+0x2c>
	case GPIOD:
	U8_ret_BIT_data=(PORTD_PIN & u8_pin);
     2a0:	80 b3       	in	r24, 0x10	; 16
     2a2:	68 23       	and	r22, r24
	break;
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <gpioPinRead+0x2c>
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
	uint8_t U8_ret_BIT_data = 0;
     2a6:	60 e0       	ldi	r22, 0x00	; 0
}
	
	
	
}
uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	66 23       	and	r22, r22
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <gpioPinRead+0x34>
     2ae:	80 e0       	ldi	r24, 0x00	; 0
if(U8_ret_BIT_data > 0)
{
	U8_ret_BIT_data = 1;
}
return U8_ret_BIT_data;
     2b0:	08 95       	ret

000002b2 <G_interrupt_Enable>:
ptr_to_Fun SPM_RDY;

void G_interrupt_Enable(void)
{
//	sei();
 SREG |=(0x80);
     2b2:	8f b7       	in	r24, 0x3f	; 63
     2b4:	80 68       	ori	r24, 0x80	; 128
     2b6:	8f bf       	out	0x3f, r24	; 63
}
     2b8:	08 95       	ret

000002ba <EX_interrupt_enable2>:
void EX_interrupt_enable2(void)
{
gpioPinDirection(GPIOB,BIT2,INPUT);
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	64 e0       	ldi	r22, 0x04	; 4
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
SET_BIT(GICR,INT2);
     2c4:	8b b7       	in	r24, 0x3b	; 59
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	8b bf       	out	0x3b, r24	; 59
SET_BIT(MCUCSR,6);
     2ca:	84 b7       	in	r24, 0x34	; 52
     2cc:	80 64       	ori	r24, 0x40	; 64
     2ce:	84 bf       	out	0x34, r24	; 52
}
     2d0:	08 95       	ret

000002d2 <G_interrupt_Disable>:
void G_interrupt_Disable(void)
{
CLEAR_BIT(SREG,7);
     2d2:	8f b7       	in	r24, 0x3f	; 63
     2d4:	8f 77       	andi	r24, 0x7F	; 127
     2d6:	8f bf       	out	0x3f, r24	; 63
}
     2d8:	08 95       	ret

000002da <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     2da:	1f 92       	push	r1
     2dc:	0f 92       	push	r0
     2de:	0f b6       	in	r0, 0x3f	; 63
     2e0:	0f 92       	push	r0
     2e2:	11 24       	eor	r1, r1
     2e4:	2f 93       	push	r18
     2e6:	3f 93       	push	r19
     2e8:	4f 93       	push	r20
     2ea:	5f 93       	push	r21
     2ec:	6f 93       	push	r22
     2ee:	7f 93       	push	r23
     2f0:	8f 93       	push	r24
     2f2:	9f 93       	push	r25
     2f4:	af 93       	push	r26
     2f6:	bf 93       	push	r27
     2f8:	ef 93       	push	r30
     2fa:	ff 93       	push	r31
  INT0_external_interrupt();
     2fc:	e0 91 8e 00 	lds	r30, 0x008E
     300:	f0 91 8f 00 	lds	r31, 0x008F
     304:	09 95       	icall
}
     306:	ff 91       	pop	r31
     308:	ef 91       	pop	r30
     30a:	bf 91       	pop	r27
     30c:	af 91       	pop	r26
     30e:	9f 91       	pop	r25
     310:	8f 91       	pop	r24
     312:	7f 91       	pop	r23
     314:	6f 91       	pop	r22
     316:	5f 91       	pop	r21
     318:	4f 91       	pop	r20
     31a:	3f 91       	pop	r19
     31c:	2f 91       	pop	r18
     31e:	0f 90       	pop	r0
     320:	0f be       	out	0x3f, r0	; 63
     322:	0f 90       	pop	r0
     324:	1f 90       	pop	r1
     326:	18 95       	reti

00000328 <__vector_2>:


void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
  INT1_external_interrupt();
     34a:	e0 91 94 00 	lds	r30, 0x0094
     34e:	f0 91 95 00 	lds	r31, 0x0095
     352:	09 95       	icall
}
     354:	ff 91       	pop	r31
     356:	ef 91       	pop	r30
     358:	bf 91       	pop	r27
     35a:	af 91       	pop	r26
     35c:	9f 91       	pop	r25
     35e:	8f 91       	pop	r24
     360:	7f 91       	pop	r23
     362:	6f 91       	pop	r22
     364:	5f 91       	pop	r21
     366:	4f 91       	pop	r20
     368:	3f 91       	pop	r19
     36a:	2f 91       	pop	r18
     36c:	0f 90       	pop	r0
     36e:	0f be       	out	0x3f, r0	; 63
     370:	0f 90       	pop	r0
     372:	1f 90       	pop	r1
     374:	18 95       	reti

00000376 <__vector_3>:


void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
     376:	1f 92       	push	r1
     378:	0f 92       	push	r0
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	0f 92       	push	r0
     37e:	11 24       	eor	r1, r1
     380:	2f 93       	push	r18
     382:	3f 93       	push	r19
     384:	4f 93       	push	r20
     386:	5f 93       	push	r21
     388:	6f 93       	push	r22
     38a:	7f 93       	push	r23
     38c:	8f 93       	push	r24
     38e:	9f 93       	push	r25
     390:	af 93       	push	r26
     392:	bf 93       	push	r27
     394:	ef 93       	push	r30
     396:	ff 93       	push	r31
  INT2_external_interrupt();
     398:	e0 91 84 00 	lds	r30, 0x0084
     39c:	f0 91 85 00 	lds	r31, 0x0085
     3a0:	09 95       	icall
}
     3a2:	ff 91       	pop	r31
     3a4:	ef 91       	pop	r30
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <__vector_4>:


void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	0f 92       	push	r0
     3cc:	11 24       	eor	r1, r1
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	ef 93       	push	r30
     3e4:	ff 93       	push	r31
TIMER2COMP();
     3e6:	e0 91 9a 00 	lds	r30, 0x009A
     3ea:	f0 91 9b 00 	lds	r31, 0x009B
     3ee:	09 95       	icall
}
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_5>:


void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
  TIMER2OVF();
     434:	e0 91 7c 00 	lds	r30, 0x007C
     438:	f0 91 7d 00 	lds	r31, 0x007D
     43c:	09 95       	icall
}
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
     460:	1f 92       	push	r1
     462:	0f 92       	push	r0
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	0f 92       	push	r0
     468:	11 24       	eor	r1, r1
     46a:	2f 93       	push	r18
     46c:	3f 93       	push	r19
     46e:	4f 93       	push	r20
     470:	5f 93       	push	r21
     472:	6f 93       	push	r22
     474:	7f 93       	push	r23
     476:	8f 93       	push	r24
     478:	9f 93       	push	r25
     47a:	af 93       	push	r26
     47c:	bf 93       	push	r27
     47e:	ef 93       	push	r30
     480:	ff 93       	push	r31
  TIMER1CAPT();
     482:	e0 91 96 00 	lds	r30, 0x0096
     486:	f0 91 97 00 	lds	r31, 0x0097
     48a:	09 95       	icall
}
     48c:	ff 91       	pop	r31
     48e:	ef 91       	pop	r30
     490:	bf 91       	pop	r27
     492:	af 91       	pop	r26
     494:	9f 91       	pop	r25
     496:	8f 91       	pop	r24
     498:	7f 91       	pop	r23
     49a:	6f 91       	pop	r22
     49c:	5f 91       	pop	r21
     49e:	4f 91       	pop	r20
     4a0:	3f 91       	pop	r19
     4a2:	2f 91       	pop	r18
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	2f 93       	push	r18
     4ba:	3f 93       	push	r19
     4bc:	4f 93       	push	r20
     4be:	5f 93       	push	r21
     4c0:	6f 93       	push	r22
     4c2:	7f 93       	push	r23
     4c4:	8f 93       	push	r24
     4c6:	9f 93       	push	r25
     4c8:	af 93       	push	r26
     4ca:	bf 93       	push	r27
     4cc:	ef 93       	push	r30
     4ce:	ff 93       	push	r31
TIMER1COMPA();
     4d0:	e0 91 82 00 	lds	r30, 0x0082
     4d4:	f0 91 83 00 	lds	r31, 0x0083
     4d8:	09 95       	icall
}
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	bf 91       	pop	r27
     4e0:	af 91       	pop	r26
     4e2:	9f 91       	pop	r25
     4e4:	8f 91       	pop	r24
     4e6:	7f 91       	pop	r23
     4e8:	6f 91       	pop	r22
     4ea:	5f 91       	pop	r21
     4ec:	4f 91       	pop	r20
     4ee:	3f 91       	pop	r19
     4f0:	2f 91       	pop	r18
     4f2:	0f 90       	pop	r0
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	0f 90       	pop	r0
     4f8:	1f 90       	pop	r1
     4fa:	18 95       	reti

000004fc <__vector_8>:

void __vector_8(void) __attribute__((signal));
void __vector_8(void)
{
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	2f 93       	push	r18
     508:	3f 93       	push	r19
     50a:	4f 93       	push	r20
     50c:	5f 93       	push	r21
     50e:	6f 93       	push	r22
     510:	7f 93       	push	r23
     512:	8f 93       	push	r24
     514:	9f 93       	push	r25
     516:	af 93       	push	r26
     518:	bf 93       	push	r27
     51a:	ef 93       	push	r30
     51c:	ff 93       	push	r31
  TIMER1COMPB();
     51e:	e0 91 80 00 	lds	r30, 0x0080
     522:	f0 91 81 00 	lds	r31, 0x0081
     526:	09 95       	icall
}
     528:	ff 91       	pop	r31
     52a:	ef 91       	pop	r30
     52c:	bf 91       	pop	r27
     52e:	af 91       	pop	r26
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	7f 91       	pop	r23
     536:	6f 91       	pop	r22
     538:	5f 91       	pop	r21
     53a:	4f 91       	pop	r20
     53c:	3f 91       	pop	r19
     53e:	2f 91       	pop	r18
     540:	0f 90       	pop	r0
     542:	0f be       	out	0x3f, r0	; 63
     544:	0f 90       	pop	r0
     546:	1f 90       	pop	r1
     548:	18 95       	reti

0000054a <__vector_9>:

void __vector_9(void) __attribute__((signal));
void __vector_9(void)
{
     54a:	1f 92       	push	r1
     54c:	0f 92       	push	r0
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	0f 92       	push	r0
     552:	11 24       	eor	r1, r1
     554:	2f 93       	push	r18
     556:	3f 93       	push	r19
     558:	4f 93       	push	r20
     55a:	5f 93       	push	r21
     55c:	6f 93       	push	r22
     55e:	7f 93       	push	r23
     560:	8f 93       	push	r24
     562:	9f 93       	push	r25
     564:	af 93       	push	r26
     566:	bf 93       	push	r27
     568:	ef 93       	push	r30
     56a:	ff 93       	push	r31
  TIMER1OVF();
     56c:	e0 91 98 00 	lds	r30, 0x0098
     570:	f0 91 99 00 	lds	r31, 0x0099
     574:	09 95       	icall
}
     576:	ff 91       	pop	r31
     578:	ef 91       	pop	r30
     57a:	bf 91       	pop	r27
     57c:	af 91       	pop	r26
     57e:	9f 91       	pop	r25
     580:	8f 91       	pop	r24
     582:	7f 91       	pop	r23
     584:	6f 91       	pop	r22
     586:	5f 91       	pop	r21
     588:	4f 91       	pop	r20
     58a:	3f 91       	pop	r19
     58c:	2f 91       	pop	r18
     58e:	0f 90       	pop	r0
     590:	0f be       	out	0x3f, r0	; 63
     592:	0f 90       	pop	r0
     594:	1f 90       	pop	r1
     596:	18 95       	reti

00000598 <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     598:	1f 92       	push	r1
     59a:	0f 92       	push	r0
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	0f 92       	push	r0
     5a0:	11 24       	eor	r1, r1
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	4f 93       	push	r20
     5a8:	5f 93       	push	r21
     5aa:	6f 93       	push	r22
     5ac:	7f 93       	push	r23
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
     5b2:	af 93       	push	r26
     5b4:	bf 93       	push	r27
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31

  TIMER0COMP();
     5ba:	e0 91 90 00 	lds	r30, 0x0090
     5be:	f0 91 91 00 	lds	r31, 0x0091
     5c2:	09 95       	icall
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <__vector_11>:

void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     5e6:	1f 92       	push	r1
     5e8:	0f 92       	push	r0
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	0f 92       	push	r0
     5ee:	11 24       	eor	r1, r1
     5f0:	2f 93       	push	r18
     5f2:	3f 93       	push	r19
     5f4:	4f 93       	push	r20
     5f6:	5f 93       	push	r21
     5f8:	6f 93       	push	r22
     5fa:	7f 93       	push	r23
     5fc:	8f 93       	push	r24
     5fe:	9f 93       	push	r25
     600:	af 93       	push	r26
     602:	bf 93       	push	r27
     604:	ef 93       	push	r30
     606:	ff 93       	push	r31

  TIMER0OVF_INT();
     608:	e0 91 86 00 	lds	r30, 0x0086
     60c:	f0 91 87 00 	lds	r31, 0x0087
     610:	09 95       	icall
}
     612:	ff 91       	pop	r31
     614:	ef 91       	pop	r30
     616:	bf 91       	pop	r27
     618:	af 91       	pop	r26
     61a:	9f 91       	pop	r25
     61c:	8f 91       	pop	r24
     61e:	7f 91       	pop	r23
     620:	6f 91       	pop	r22
     622:	5f 91       	pop	r21
     624:	4f 91       	pop	r20
     626:	3f 91       	pop	r19
     628:	2f 91       	pop	r18
     62a:	0f 90       	pop	r0
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	0f 90       	pop	r0
     630:	1f 90       	pop	r1
     632:	18 95       	reti

00000634 <__vector_12>:

void __vector_12(void) __attribute__((signal));
void __vector_12(void)
{
     634:	1f 92       	push	r1
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	0f 92       	push	r0
     63c:	11 24       	eor	r1, r1
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
  SPI_STC();
     656:	e0 91 63 00 	lds	r30, 0x0063
     65a:	f0 91 64 00 	lds	r31, 0x0064
     65e:	09 95       	icall
}
     660:	ff 91       	pop	r31
     662:	ef 91       	pop	r30
     664:	bf 91       	pop	r27
     666:	af 91       	pop	r26
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	7f 91       	pop	r23
     66e:	6f 91       	pop	r22
     670:	5f 91       	pop	r21
     672:	4f 91       	pop	r20
     674:	3f 91       	pop	r19
     676:	2f 91       	pop	r18
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	1f 90       	pop	r1
     680:	18 95       	reti

00000682 <__vector_13>:

void __vector_13(void) __attribute__((signal));
void __vector_13(void)
{
     682:	1f 92       	push	r1
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	0f 92       	push	r0
     68a:	11 24       	eor	r1, r1
     68c:	2f 93       	push	r18
     68e:	3f 93       	push	r19
     690:	4f 93       	push	r20
     692:	5f 93       	push	r21
     694:	6f 93       	push	r22
     696:	7f 93       	push	r23
     698:	8f 93       	push	r24
     69a:	9f 93       	push	r25
     69c:	af 93       	push	r26
     69e:	bf 93       	push	r27
     6a0:	ef 93       	push	r30
     6a2:	ff 93       	push	r31
  USART_RXC();
     6a4:	e0 91 7a 00 	lds	r30, 0x007A
     6a8:	f0 91 7b 00 	lds	r31, 0x007B
     6ac:	09 95       	icall
}
     6ae:	ff 91       	pop	r31
     6b0:	ef 91       	pop	r30
     6b2:	bf 91       	pop	r27
     6b4:	af 91       	pop	r26
     6b6:	9f 91       	pop	r25
     6b8:	8f 91       	pop	r24
     6ba:	7f 91       	pop	r23
     6bc:	6f 91       	pop	r22
     6be:	5f 91       	pop	r21
     6c0:	4f 91       	pop	r20
     6c2:	3f 91       	pop	r19
     6c4:	2f 91       	pop	r18
     6c6:	0f 90       	pop	r0
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	0f 90       	pop	r0
     6cc:	1f 90       	pop	r1
     6ce:	18 95       	reti

000006d0 <__vector_14>:

void __vector_14(void) __attribute__((signal));
void __vector_14(void)
{
     6d0:	1f 92       	push	r1
     6d2:	0f 92       	push	r0
     6d4:	0f b6       	in	r0, 0x3f	; 63
     6d6:	0f 92       	push	r0
     6d8:	11 24       	eor	r1, r1
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
  USART_UDRE();
     6f2:	e0 91 92 00 	lds	r30, 0x0092
     6f6:	f0 91 93 00 	lds	r31, 0x0093
     6fa:	09 95       	icall
}
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <__vector_15>:

void __vector_15(void) __attribute__((signal));
void __vector_15(void)
{
     71e:	1f 92       	push	r1
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	0f 92       	push	r0
     726:	11 24       	eor	r1, r1
     728:	2f 93       	push	r18
     72a:	3f 93       	push	r19
     72c:	4f 93       	push	r20
     72e:	5f 93       	push	r21
     730:	6f 93       	push	r22
     732:	7f 93       	push	r23
     734:	8f 93       	push	r24
     736:	9f 93       	push	r25
     738:	af 93       	push	r26
     73a:	bf 93       	push	r27
     73c:	ef 93       	push	r30
     73e:	ff 93       	push	r31
  USART_TXC();
     740:	e0 91 61 00 	lds	r30, 0x0061
     744:	f0 91 62 00 	lds	r31, 0x0062
     748:	09 95       	icall
}
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	bf 91       	pop	r27
     750:	af 91       	pop	r26
     752:	9f 91       	pop	r25
     754:	8f 91       	pop	r24
     756:	7f 91       	pop	r23
     758:	6f 91       	pop	r22
     75a:	5f 91       	pop	r21
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <__vector_16>:

void __vector_16(void) __attribute__((signal));
void __vector_16(void)
{
     76c:	1f 92       	push	r1
     76e:	0f 92       	push	r0
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	0f 92       	push	r0
     774:	11 24       	eor	r1, r1
     776:	2f 93       	push	r18
     778:	3f 93       	push	r19
     77a:	4f 93       	push	r20
     77c:	5f 93       	push	r21
     77e:	6f 93       	push	r22
     780:	7f 93       	push	r23
     782:	8f 93       	push	r24
     784:	9f 93       	push	r25
     786:	af 93       	push	r26
     788:	bf 93       	push	r27
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
  ADC_INT();
     78e:	e0 91 8a 00 	lds	r30, 0x008A
     792:	f0 91 8b 00 	lds	r31, 0x008B
     796:	09 95       	icall
}
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	bf 91       	pop	r27
     79e:	af 91       	pop	r26
     7a0:	9f 91       	pop	r25
     7a2:	8f 91       	pop	r24
     7a4:	7f 91       	pop	r23
     7a6:	6f 91       	pop	r22
     7a8:	5f 91       	pop	r21
     7aa:	4f 91       	pop	r20
     7ac:	3f 91       	pop	r19
     7ae:	2f 91       	pop	r18
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_17>:

void __vector_17(void) __attribute__((signal));
void __vector_17(void)
{
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	4f 93       	push	r20
     7ca:	5f 93       	push	r21
     7cc:	6f 93       	push	r22
     7ce:	7f 93       	push	r23
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
     7d4:	af 93       	push	r26
     7d6:	bf 93       	push	r27
     7d8:	ef 93       	push	r30
     7da:	ff 93       	push	r31
  EE_RDY();
     7dc:	e0 91 8c 00 	lds	r30, 0x008C
     7e0:	f0 91 8d 00 	lds	r31, 0x008D
     7e4:	09 95       	icall
}
     7e6:	ff 91       	pop	r31
     7e8:	ef 91       	pop	r30
     7ea:	bf 91       	pop	r27
     7ec:	af 91       	pop	r26
     7ee:	9f 91       	pop	r25
     7f0:	8f 91       	pop	r24
     7f2:	7f 91       	pop	r23
     7f4:	6f 91       	pop	r22
     7f6:	5f 91       	pop	r21
     7f8:	4f 91       	pop	r20
     7fa:	3f 91       	pop	r19
     7fc:	2f 91       	pop	r18
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <__vector_18>:

void __vector_18(void) __attribute__((signal));
void __vector_18(void)
{
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
     812:	2f 93       	push	r18
     814:	3f 93       	push	r19
     816:	4f 93       	push	r20
     818:	5f 93       	push	r21
     81a:	6f 93       	push	r22
     81c:	7f 93       	push	r23
     81e:	8f 93       	push	r24
     820:	9f 93       	push	r25
     822:	af 93       	push	r26
     824:	bf 93       	push	r27
     826:	ef 93       	push	r30
     828:	ff 93       	push	r31
  ANA_COMP();
     82a:	e0 91 88 00 	lds	r30, 0x0088
     82e:	f0 91 89 00 	lds	r31, 0x0089
     832:	09 95       	icall
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	1f 90       	pop	r1
     854:	18 95       	reti

00000856 <__vector_19>:

void __vector_19(void) __attribute__((signal));
void __vector_19(void)
{
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
  TWI_I2C();
     878:	e0 91 78 00 	lds	r30, 0x0078
     87c:	f0 91 79 00 	lds	r31, 0x0079
     880:	09 95       	icall
}
     882:	ff 91       	pop	r31
     884:	ef 91       	pop	r30
     886:	bf 91       	pop	r27
     888:	af 91       	pop	r26
     88a:	9f 91       	pop	r25
     88c:	8f 91       	pop	r24
     88e:	7f 91       	pop	r23
     890:	6f 91       	pop	r22
     892:	5f 91       	pop	r21
     894:	4f 91       	pop	r20
     896:	3f 91       	pop	r19
     898:	2f 91       	pop	r18
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <__vector_20>:

void __vector_20(void) __attribute__((signal));
void __vector_20(void)
{
     8a4:	1f 92       	push	r1
     8a6:	0f 92       	push	r0
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	0f 92       	push	r0
     8ac:	11 24       	eor	r1, r1
     8ae:	2f 93       	push	r18
     8b0:	3f 93       	push	r19
     8b2:	4f 93       	push	r20
     8b4:	5f 93       	push	r21
     8b6:	6f 93       	push	r22
     8b8:	7f 93       	push	r23
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
     8be:	af 93       	push	r26
     8c0:	bf 93       	push	r27
     8c2:	ef 93       	push	r30
     8c4:	ff 93       	push	r31
  SPM_RDY();
     8c6:	e0 91 7e 00 	lds	r30, 0x007E
     8ca:	f0 91 7f 00 	lds	r31, 0x007F
     8ce:	09 95       	icall
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	7f 91       	pop	r23
     8de:	6f 91       	pop	r22
     8e0:	5f 91       	pop	r21
     8e2:	4f 91       	pop	r20
     8e4:	3f 91       	pop	r19
     8e6:	2f 91       	pop	r18
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <Led_Init>:
	LED_3

*/
void Led_Init(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	69 f0       	breq	.+26     	; 0x910 <Led_Init+0x1e>
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	28 f0       	brcs	.+10     	; 0x904 <Led_Init+0x12>
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	79 f0       	breq	.+30     	; 0x91c <Led_Init+0x2a>
     8fe:	83 30       	cpi	r24, 0x03	; 3
     900:	c1 f4       	brne	.+48     	; 0x932 <Led_Init+0x40>
     902:	12 c0       	rjmp	.+36     	; 0x928 <Led_Init+0x36>
{
case LED_0:
gpioPinDirection(LED_0_GPIO,LED_0_BIT,HIGH);
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	60 e1       	ldi	r22, 0x10	; 16
     908:	4f ef       	ldi	r20, 0xFF	; 255
     90a:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
break;
     90e:	08 95       	ret

case LED_1:
gpioPinDirection(LED_1_GPIO,LED_1_BIT,HIGH);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	60 e2       	ldi	r22, 0x20	; 32
     914:	4f ef       	ldi	r20, 0xFF	; 255
     916:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
break;
     91a:	08 95       	ret

case LED_2:
gpioPinDirection(LED_2_GPIO,LED_2_BIT,HIGH);
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	60 e4       	ldi	r22, 0x40	; 64
     920:	4f ef       	ldi	r20, 0xFF	; 255
     922:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
break;
     926:	08 95       	ret

case LED_3:
gpioPinDirection(LED_3_GPIO,LED_3_BIT,HIGH);
     928:	81 e0       	ldi	r24, 0x01	; 1
     92a:	60 e8       	ldi	r22, 0x80	; 128
     92c:	4f ef       	ldi	r20, 0xFF	; 255
     92e:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
     932:	08 95       	ret

00000934 <Led_On>:
}


void Led_On(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	69 f0       	breq	.+26     	; 0x952 <Led_On+0x1e>
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	28 f0       	brcs	.+10     	; 0x946 <Led_On+0x12>
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	79 f0       	breq	.+30     	; 0x95e <Led_On+0x2a>
     940:	83 30       	cpi	r24, 0x03	; 3
     942:	c1 f4       	brne	.+48     	; 0x974 <Led_On+0x40>
     944:	12 c0       	rjmp	.+36     	; 0x96a <Led_On+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,HIGH);
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	60 e1       	ldi	r22, 0x10	; 16
     94a:	4f ef       	ldi	r20, 0xFF	; 255
     94c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     950:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,HIGH);
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	4f ef       	ldi	r20, 0xFF	; 255
     958:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     95c:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,HIGH);
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	60 e4       	ldi	r22, 0x40	; 64
     962:	4f ef       	ldi	r20, 0xFF	; 255
     964:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     968:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,HIGH);
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	60 e8       	ldi	r22, 0x80	; 128
     96e:	4f ef       	ldi	r20, 0xFF	; 255
     970:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
     974:	08 95       	ret

00000976 <Led_Off>:
}

void Led_Off(En_LedNumber_t en_led_id)
{

switch(en_led_id)
     976:	81 30       	cpi	r24, 0x01	; 1
     978:	69 f0       	breq	.+26     	; 0x994 <Led_Off+0x1e>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	28 f0       	brcs	.+10     	; 0x988 <Led_Off+0x12>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	79 f0       	breq	.+30     	; 0x9a0 <Led_Off+0x2a>
     982:	83 30       	cpi	r24, 0x03	; 3
     984:	c1 f4       	brne	.+48     	; 0x9b6 <Led_Off+0x40>
     986:	12 c0       	rjmp	.+36     	; 0x9ac <Led_Off+0x36>
{
case LED_0:
gpioPinWrite(LED_0_GPIO,LED_0_BIT,LOW);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	60 e1       	ldi	r22, 0x10	; 16
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     992:	08 95       	ret

case LED_1:
gpioPinWrite(LED_1_GPIO,LED_1_BIT,LOW);
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	60 e2       	ldi	r22, 0x20	; 32
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     99e:	08 95       	ret

case LED_2:
gpioPinWrite(LED_2_GPIO,LED_2_BIT,LOW);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	60 e4       	ldi	r22, 0x40	; 64
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
break;
     9aa:	08 95       	ret

case LED_3:
gpioPinWrite(LED_3_GPIO,LED_3_BIT,LOW);
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	60 e8       	ldi	r22, 0x80	; 128
     9b0:	40 e0       	ldi	r20, 0x00	; 0
     9b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <gpioPinWrite>
     9b6:	08 95       	ret

000009b8 <Led_Toggle>:


}
void Led_Toggle(En_LedNumber_t en_led_id)
{
switch(en_led_id)
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	61 f0       	breq	.+24     	; 0x9d4 <Led_Toggle+0x1c>
     9bc:	81 30       	cpi	r24, 0x01	; 1
     9be:	28 f0       	brcs	.+10     	; 0x9ca <Led_Toggle+0x12>
     9c0:	82 30       	cpi	r24, 0x02	; 2
     9c2:	69 f0       	breq	.+26     	; 0x9de <Led_Toggle+0x26>
     9c4:	83 30       	cpi	r24, 0x03	; 3
     9c6:	a1 f4       	brne	.+40     	; 0x9f0 <Led_Toggle+0x38>
     9c8:	0f c0       	rjmp	.+30     	; 0x9e8 <Led_Toggle+0x30>
{
case LED_0:
gpioPinToggle(LED_0_GPIO,LED_0_BIT);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	60 e1       	ldi	r22, 0x10	; 16
     9ce:	0e 94 25 01 	call	0x24a	; 0x24a <gpioPinToggle>
break;
     9d2:	08 95       	ret

case LED_1:
gpioPinToggle(LED_1_GPIO,LED_1_BIT);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	60 e2       	ldi	r22, 0x20	; 32
     9d8:	0e 94 25 01 	call	0x24a	; 0x24a <gpioPinToggle>
break;
     9dc:	08 95       	ret

case LED_2:
gpioPinToggle(LED_2_GPIO,LED_2_BIT);
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	60 e4       	ldi	r22, 0x40	; 64
     9e2:	0e 94 25 01 	call	0x24a	; 0x24a <gpioPinToggle>
break;
     9e6:	08 95       	ret

case LED_3:
gpioPinToggle(LED_3_GPIO,LED_3_BIT);
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	60 e8       	ldi	r22, 0x80	; 128
     9ec:	0e 94 25 01 	call	0x24a	; 0x24a <gpioPinToggle>
     9f0:	08 95       	ret

000009f2 <pushButtonInit>:
	BTN_3
*/
void pushButtonInit(En_buttonId_t en_butotn_id)
{
//timer2Init(T2_NORMAL_MODE,T2_OC2_DIS,T2_PRESCALER_NO,0,0,0,T2_POLLING);	
switch(en_butotn_id)
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	69 f0       	breq	.+26     	; 0xa10 <pushButtonInit+0x1e>
     9f6:	81 30       	cpi	r24, 0x01	; 1
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <pushButtonInit+0x12>
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	79 f0       	breq	.+30     	; 0xa1c <pushButtonInit+0x2a>
     9fe:	83 30       	cpi	r24, 0x03	; 3
     a00:	c1 f4       	brne	.+48     	; 0xa32 <pushButtonInit+0x40>
     a02:	12 c0       	rjmp	.+36     	; 0xa28 <pushButtonInit+0x36>
{
case BTN_0:
{
gpioPinDirection(BTN_0_GPIO,BTN_0_BIT,LOW);
     a04:	82 e0       	ldi	r24, 0x02	; 2
     a06:	60 e1       	ldi	r22, 0x10	; 16
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>

break;
     a0e:	08 95       	ret
}
case BTN_1:
{
gpioPinDirection(BTN_1_GPIO,BTN_1_BIT,LOW);
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	64 e0       	ldi	r22, 0x04	; 4
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>

break;
     a1a:	08 95       	ret
}
case BTN_2:
{
gpioPinDirection(BTN_2_GPIO,BTN_2_BIT,LOW);
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	64 e0       	ldi	r22, 0x04	; 4
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>

break;
     a26:	08 95       	ret
}
case BTN_3:
{
gpioPinDirection(BTN_3_GPIO,BTN_3_BIT,LOW);
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	68 e0       	ldi	r22, 0x08	; 8
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
     a32:	08 95       	ret

00000a34 <pushButtonGetStatus>:
}

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id)
{
	
switch(en_butotn_id)
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	f9 f0       	breq	.+62     	; 0xa76 <pushButtonGetStatus+0x42>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	30 f0       	brcs	.+12     	; 0xa48 <pushButtonGetStatus+0x14>
     a3c:	82 30       	cpi	r24, 0x02	; 2
     a3e:	81 f1       	breq	.+96     	; 0xaa0 <pushButtonGetStatus+0x6c>
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	09 f0       	breq	.+2      	; 0xa46 <pushButtonGetStatus+0x12>
     a44:	57 c0       	rjmp	.+174    	; 0xaf4 <pushButtonGetStatus+0xc0>
     a46:	41 c0       	rjmp	.+130    	; 0xaca <pushButtonGetStatus+0x96>
{
case BTN_0:
{
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	60 e1       	ldi	r22, 0x10	; 16
     a4c:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	09 f0       	breq	.+2      	; 0xa56 <pushButtonGetStatus+0x22>
     a54:	50 c0       	rjmp	.+160    	; 0xaf6 <pushButtonGetStatus+0xc2>
{ timer2Start();
     a56:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
	timer2DelayMs(50);
     a5a:	82 e3       	ldi	r24, 0x32	; 50
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 73 07 	call	0xee6	; 0xee6 <timer2DelayMs>
	
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	60 e1       	ldi	r22, 0x10	; 16
     a66:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
	return Pressed;
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <pushButtonGetStatus+0x3e>
     a70:	49 c0       	rjmp	.+146    	; 0xb04 <pushButtonGetStatus+0xd0>
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	47 c0       	rjmp	.+142    	; 0xb04 <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_1:
{
if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	64 e0       	ldi	r22, 0x04	; 4
     a7a:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	e1 f5       	brne	.+120    	; 0xafa <pushButtonGetStatus+0xc6>
{
timer2Start();
     a82:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
timer2DelayMs(50);
     a86:	82 e3       	ldi	r24, 0x32	; 50
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 73 07 	call	0xee6	; 0xee6 <timer2DelayMs>

if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	64 e0       	ldi	r22, 0x04	; 4
     a92:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer2Start();
	timer2DelayMs(50);
	
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	a1 f1       	breq	.+104    	; 0xb04 <pushButtonGetStatus+0xd0>
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	32 c0       	rjmp	.+100    	; 0xb04 <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_2:
{
if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	64 e0       	ldi	r22, 0x04	; 4
     aa4:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	49 f5       	brne	.+82     	; 0xafe <pushButtonGetStatus+0xca>
{
	timer2Start();
     aac:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
	timer2DelayMs(50);
     ab0:	82 e3       	ldi	r24, 0x32	; 50
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	0e 94 73 07 	call	0xee6	; 0xee6 <timer2DelayMs>
	
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	64 e0       	ldi	r22, 0x04	; 4
     abc:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer2Start();
	timer2DelayMs(50);
	
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	f9 f0       	breq	.+62     	; 0xb04 <pushButtonGetStatus+0xd0>
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	1d c0       	rjmp	.+58     	; 0xb04 <pushButtonGetStatus+0xd0>
}else{return Released;}
break;		
}
case BTN_3:
{
if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	68 e0       	ldi	r22, 0x08	; 8
     ace:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	b1 f4       	brne	.+44     	; 0xb02 <pushButtonGetStatus+0xce>
{
	timer2Start();
     ad6:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
	timer2DelayMs(50);
     ada:	82 e3       	ldi	r24, 0x32	; 50
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 73 07 	call	0xee6	; 0xee6 <timer2DelayMs>
		if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	68 e0       	ldi	r22, 0x08	; 8
     ae6:	0e 94 3e 01 	call	0x27c	; 0x27c <gpioPinRead>
if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
{ timer2Start();
	timer2DelayMs(50);
	
	if(gpioPinRead(BTN_0_GPIO,BTN_0_BIT) == Pressed)
	return Pressed;
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	51 f0       	breq	.+20     	; 0xb04 <pushButtonGetStatus+0xd0>
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	08 c0       	rjmp	.+16     	; 0xb04 <pushButtonGetStatus+0xd0>
     af4:	08 95       	ret
	else {return Released;}
}else{return Released;}
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <pushButtonGetStatus+0xd0>
timer2DelayMs(50);

if(gpioPinRead(BTN_1_GPIO,BTN_1_BIT) == Pressed)
return Pressed;
	else {return Released;}
}else{return Released;}
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <pushButtonGetStatus+0xd0>
	timer2DelayMs(50);
	
	if(gpioPinRead(BTN_2_GPIO,BTN_2_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <pushButtonGetStatus+0xd0>
	timer2Start();
	timer2DelayMs(50);
		if(gpioPinRead(BTN_3_GPIO,BTN_3_BIT) == Pressed)
	return Pressed;
else {return Released;}
}else{return Released;}
     b02:	90 e0       	ldi	r25, 0x00	; 0
break;		
}

}
}
     b04:	89 2f       	mov	r24, r25
     b06:	08 95       	ret

00000b08 <SPI_Init>:
	 ST_SPI_Configuration *gConfig = & SPI_Config;

	/********************Enable SPI Interrupt ******************/

	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	SPCR |= (gConfig->MASTER_SLAVE_MODE) | (gConfig->DATA_ORDER)
     b08:	9d b1       	in	r25, 0x0d	; 13
     b0a:	80 91 65 00 	lds	r24, 0x0065
     b0e:	89 2b       	or	r24, r25
     b10:	90 91 6c 00 	lds	r25, 0x006C
     b14:	89 2b       	or	r24, r25
     b16:	90 91 69 00 	lds	r25, 0x0069
     b1a:	89 2b       	or	r24, r25
     b1c:	90 91 66 00 	lds	r25, 0x0066
     b20:	89 2b       	or	r24, r25
     b22:	90 91 6a 00 	lds	r25, 0x006A
     b26:	89 2b       	or	r24, r25
     b28:	90 91 6b 00 	lds	r25, 0x006B
     b2c:	89 2b       	or	r24, r25
     b2e:	8d b9       	out	0x0d, r24	; 13
			  | (gConfig->OPERATING_LEVEL) | (gConfig->PRESCALAR)
			 | (gConfig->SAMPLING_EDGE) | (gConfig-> INT_ENABLE) ;

	SPSR |= (gConfig->DOUBLE_SPEED);
     b30:	9e b1       	in	r25, 0x0e	; 14
     b32:	80 91 68 00 	lds	r24, 0x0068
     b36:	89 2b       	or	r24, r25
     b38:	8e b9       	out	0x0e, r24	; 14
			 gpioPinDirection(GPIOB, BIT4 | BIT5 | BIT7, OUTPUT);
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	60 eb       	ldi	r22, 0xB0	; 176
     b3e:	4f ef       	ldi	r20, 0xFF	; 255
     b40:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>
			 gpioPinDirection(GPIOB, BIT6, INPUT);
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	60 e4       	ldi	r22, 0x40	; 64
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	0e 94 ab 00 	call	0x156	; 0x156 <gpioPinDirection>


		SPCR |=  (gConfig->ENABLE);
     b4e:	9d b1       	in	r25, 0x0d	; 13
     b50:	80 91 67 00 	lds	r24, 0x0067
     b54:	89 2b       	or	r24, r25
     b56:	8d b9       	out	0x0d, r24	; 13



}
     b58:	08 95       	ret

00000b5a <SPI_Transciever_INT>:
void SPI_Transciever_INT(void)
{
	u8_DATA=SPDR;
     b5a:	8f b1       	in	r24, 0x0f	; 15
     b5c:	80 93 60 00 	sts	0x0060, r24
//SPDR=u8_DATA;
	Uart_tryansmitfirstbyte(u8_DATA);
     b60:	80 91 60 00 	lds	r24, 0x0060
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 ee 08 	call	0x11dc	; 0x11dc <Uart_tryansmitfirstbyte>
	u8_interrupt_spi=1;
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	80 93 6e 00 	sts	0x006E, r24
}
     b70:	08 95       	ret

00000b72 <SPI_Send>:
void  SPI_Send(uint8_t u8_data)
{
     /* Start transmission */
     SPDR = u8_data;
     b72:	8f b9       	out	0x0f, r24	; 15
    if (!(READBIT(SPCR,SPIE)))
     b74:	6f 99       	sbic	0x0d, 7	; 13
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <SPI_Send+0xa>
    {
	 	/* Wait for transmission complete */
     while(!(SPSR & (1<<SPIF)));
     b78:	77 9b       	sbis	0x0e, 7	; 14
     b7a:	fe cf       	rjmp	.-4      	; 0xb78 <SPI_Send+0x6>
     b7c:	08 95       	ret

00000b7e <spi_INT_CALLED>:
		}
}


uint8_t spi_INT_CALLED(void){
	return SPDR;
     b7e:	8f b1       	in	r24, 0x0f	; 15
}
     b80:	08 95       	ret

00000b82 <SPI_Receive>:

uint8_t  SPI_Receive(void)
{
	if (!(READBIT(SPCR,SPIE)))
     b82:	6f 99       	sbic	0x0d, 7	; 13
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <SPI_Receive+0x8>
	{
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));
     b86:	77 9b       	sbis	0x0e, 7	; 14
     b88:	fe cf       	rjmp	.-4      	; 0xb86 <SPI_Receive+0x4>
		//return SPDR ; // Received data
	}
	return SPDR;
     b8a:	8f b1       	in	r24, 0x0f	; 15
}
     b8c:	08 95       	ret

00000b8e <SPI_Checks_for_collision>:


 uint8_t SPI_Checks_for_collision(void)
{
	 return READBIT(SPSR, WCOL);
     b8e:	8e b1       	in	r24, 0x0e	; 14
     b90:	82 95       	swap	r24
     b92:	86 95       	lsr	r24
     b94:	86 95       	lsr	r24
     b96:	83 70       	andi	r24, 0x03	; 3
}
     b98:	81 70       	andi	r24, 0x01	; 1
     b9a:	08 95       	ret

00000b9c <timer0Set>:
}

}
void timer0Set(uint8_t u8_value)
{
TCNT0 =	u8_value;
     b9c:	82 bf       	out	0x32, r24	; 50
}
     b9e:	08 95       	ret

00000ba0 <timer0Read>:

uint8_t timer0Read(void)
{
	 return TCNT0;
     ba0:	82 b7       	in	r24, 0x32	; 50
}
     ba2:	08 95       	ret

00000ba4 <timer0Start>:
Depending on prescaler	x     X    X

*/
void timer0Start(void)
{
	 TCCR0 &= (0xF8);
     ba4:	83 b7       	in	r24, 0x33	; 51
     ba6:	88 7f       	andi	r24, 0xF8	; 248
     ba8:	83 bf       	out	0x33, r24	; 51
	 TCCR0 |= Prescaler_Value;
     baa:	93 b7       	in	r25, 0x33	; 51
     bac:	80 91 75 00 	lds	r24, 0x0075
     bb0:	89 2b       	or	r24, r25
     bb2:	83 bf       	out	0x33, r24	; 51
}
     bb4:	08 95       	ret

00000bb6 <timer0Stop>:
						      0     0    0
*/
void timer0Stop(void)
 {

TCCR0 &= (0xF8);
     bb6:	83 b7       	in	r24, 0x33	; 51
     bb8:	88 7f       	andi	r24, 0xF8	; 248
     bba:	83 bf       	out	0x33, r24	; 51

 }
     bbc:	08 95       	ret

00000bbe <timer0Init>:
uint8_t Prescaler_Value2=0;
uint8_t u8g_T1_Prescaler=0;
volatile uint8_t pwm_time_on=0,flag=0;

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal,uint8_t u8_initialValue, uint8_t u8_outputCompare,En_timer0Interrupt_t en_interruptMask)
{
     bbe:	ef 92       	push	r14
     bc0:	0f 93       	push	r16
if(en_prescal == T0_NO_CLOCK)
     bc2:	44 23       	and	r20, r20
     bc4:	19 f4       	brne	.+6      	; 0xbcc <timer0Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer0Stop();
     bc6:	0e 94 db 05 	call	0xbb6	; 0xbb6 <timer0Stop>
     bca:	46 c0       	rjmp	.+140    	; 0xc58 <timer0Init+0x9a>
}
else
{
TCCR0 |= en_mode|en_prescal;
     bcc:	93 b7       	in	r25, 0x33	; 51
     bce:	89 2b       	or	r24, r25
     bd0:	84 2b       	or	r24, r20
     bd2:	83 bf       	out	0x33, r24	; 51
Prescaler_Value=en_prescal;
     bd4:	40 93 75 00 	sts	0x0075, r20
TCNT0 = u8_initialValue;
     bd8:	22 bf       	out	0x32, r18	; 50
switch(en_OC0){
     bda:	60 31       	cpi	r22, 0x10	; 16
     bdc:	71 f0       	breq	.+28     	; 0xbfa <timer0Init+0x3c>
     bde:	61 31       	cpi	r22, 0x11	; 17
     be0:	18 f4       	brcc	.+6      	; 0xbe8 <timer0Init+0x2a>
     be2:	66 23       	and	r22, r22
     be4:	31 f0       	breq	.+12     	; 0xbf2 <timer0Init+0x34>
     be6:	14 c0       	rjmp	.+40     	; 0xc10 <timer0Init+0x52>
     be8:	60 32       	cpi	r22, 0x20	; 32
     bea:	59 f0       	breq	.+22     	; 0xc02 <timer0Init+0x44>
     bec:	60 33       	cpi	r22, 0x30	; 48
     bee:	81 f4       	brne	.+32     	; 0xc10 <timer0Init+0x52>
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <timer0Init+0x4c>
	case  T0_OC0_DIS:
	{
	TCCR0 &= 0xCF;
     bf2:	83 b7       	in	r24, 0x33	; 51
     bf4:	8f 7c       	andi	r24, 0xCF	; 207
     bf6:	83 bf       	out	0x33, r24	; 51
		break;
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <timer0Init+0x52>
	}
	case T0_OC0_TOGGLE:
	{
		TCCR0|=T0_OC0_TOGGLE;
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	80 61       	ori	r24, 0x10	; 16
     bfe:	83 bf       	out	0x33, r24	; 51
		break;
     c00:	07 c0       	rjmp	.+14     	; 0xc10 <timer0Init+0x52>
	}
	case  T0_OC0_CLEAR:
	{
	TCCR0 |= T0_OC0_CLEAR;
     c02:	83 b7       	in	r24, 0x33	; 51
     c04:	80 62       	ori	r24, 0x20	; 32
     c06:	83 bf       	out	0x33, r24	; 51

		break;
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <timer0Init+0x52>
	}
	case T0_OC0_SET:
	{
		TCCR0 |=T0_OC0_SET;
     c0a:	83 b7       	in	r24, 0x33	; 51
     c0c:	80 63       	ori	r24, 0x30	; 48
     c0e:	83 bf       	out	0x33, r24	; 51
		break;
	}

}
OCR0  =u8_outputCompare;
     c10:	0c bf       	out	0x3c, r16	; 60
switch(en_interruptMask){
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	e8 16       	cp	r14, r24
     c16:	59 f0       	breq	.+22     	; 0xc2e <timer0Init+0x70>
     c18:	e8 16       	cp	r14, r24
     c1a:	20 f0       	brcs	.+8      	; 0xc24 <timer0Init+0x66>
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	e8 16       	cp	r14, r24
     c20:	d9 f4       	brne	.+54     	; 0xc58 <timer0Init+0x9a>
     c22:	0e c0       	rjmp	.+28     	; 0xc40 <timer0Init+0x82>
case  T0_POLLING:{
pooling=0;
     c24:	10 92 74 00 	sts	0x0074, r1
//G_interrupt_Disable();
TIMSK &= T0_POLLING;
     c28:	89 b7       	in	r24, 0x39	; 57
     c2a:	19 be       	out	0x39, r1	; 57
break;
     c2c:	15 c0       	rjmp	.+42     	; 0xc58 <timer0Init+0x9a>
}
case T0_INTERRUPT_NORMAL :
{pooling=1;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	80 93 74 00 	sts	0x0074, r24
G_interrupt_Enable();
     c34:	0e 94 59 01 	call	0x2b2	; 0x2b2 <G_interrupt_Enable>
TIMSK |= T0_INTERRUPT_NORMAL;
     c38:	89 b7       	in	r24, 0x39	; 57
     c3a:	81 60       	ori	r24, 0x01	; 1
     c3c:	89 bf       	out	0x39, r24	; 57
break;
     c3e:	0c c0       	rjmp	.+24     	; 0xc58 <timer0Init+0x9a>
}
case T0_INTERRUPT_CMP:
{pooling=1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	80 93 74 00 	sts	0x0074, r24
//G_interrupt_Enable();
SET_BIT(SREG,7);
     c46:	8f b7       	in	r24, 0x3f	; 63
     c48:	80 68       	ori	r24, 0x80	; 128
     c4a:	8f bf       	out	0x3f, r24	; 63
TIMSK |= T0_INTERRUPT_NORMAL;
     c4c:	89 b7       	in	r24, 0x39	; 57
     c4e:	81 60       	ori	r24, 0x01	; 1
     c50:	89 bf       	out	0x39, r24	; 57
TIMSK |=T0_INTERRUPT_CMP;
     c52:	89 b7       	in	r24, 0x39	; 57
     c54:	82 60       	ori	r24, 0x02	; 2
     c56:	89 bf       	out	0x39, r24	; 57
}
}

}

}
     c58:	0f 91       	pop	r16
     c5a:	ef 90       	pop	r14
     c5c:	08 95       	ret

00000c5e <timer0DelayMs>:
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c5e:	ac 01       	movw	r20, r24
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	41 15       	cp	r20, r1
     c66:	51 05       	cpc	r21, r1
     c68:	61 05       	cpc	r22, r1
     c6a:	71 05       	cpc	r23, r1
     c6c:	89 f0       	breq	.+34     	; 0xc90 <timer0DelayMs+0x32>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	dc 01       	movw	r26, r24
{
	while ((TIFR&0x01)==0);
     c74:	08 b6       	in	r0, 0x38	; 56
     c76:	00 fe       	sbrs	r0, 0
     c78:	fd cf       	rjmp	.-6      	; 0xc74 <timer0DelayMs+0x16>
	TIFR |=0x01;
     c7a:	28 b7       	in	r18, 0x38	; 56
     c7c:	21 60       	ori	r18, 0x01	; 1
     c7e:	28 bf       	out	0x38, r18	; 56
	uint32_t u32_loop=0;
/*	u32_ovf_counter=0;
		timer0Set(48);
		while(u32_ovf_counter <= (64)*u16_delay_in_ms);
*/
for (u32_loop=0;u32_loop<u16_delay_in_ms;u32_loop++)
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	a1 1d       	adc	r26, r1
     c84:	b1 1d       	adc	r27, r1
     c86:	84 17       	cp	r24, r20
     c88:	95 07       	cpc	r25, r21
     c8a:	a6 07       	cpc	r26, r22
     c8c:	b7 07       	cpc	r27, r23
     c8e:	90 f3       	brcs	.-28     	; 0xc74 <timer0DelayMs+0x16>
     c90:	08 95       	ret

00000c92 <timer0DelayUs>:
 at pooling _no prescaling
 240at TCNT0

 */
 void timer0DelayUs(uint32_t u32_delay_in_us)
 {  uint32_t u32_loop=0;
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
	for (u32_loop=0;u32_loop<u32_delay_in_us;u32_loop++)
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	a1 05       	cpc	r26, r1
     c9a:	b1 05       	cpc	r27, r1
     c9c:	31 f0       	breq	.+12     	; 0xcaa <timer0DelayUs+0x18>
	{
	timer0Set(240);
     c9e:	80 ef       	ldi	r24, 0xF0	; 240
     ca0:	0e 94 ce 05 	call	0xb9c	; 0xb9c <timer0Set>
	while(timer0Read()<=255);
     ca4:	0e 94 d0 05 	call	0xba0	; 0xba0 <timer0Read>
     ca8:	fd cf       	rjmp	.-6      	; 0xca4 <timer0DelayUs+0x12>
	//while(u32_ovf_counter <= (8*u32_delay_in_us/1000));
	}
	TIFR |=(1<<TOV0);/*Clear the flag*/
     caa:	88 b7       	in	r24, 0x38	; 56
     cac:	81 60       	ori	r24, 0x01	; 1
     cae:	88 bf       	out	0x38, r24	; 56
}/*1*/
     cb0:	08 95       	ret

00000cb2 <timer0SwPWM>:
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	cf 93       	push	r28
     cbc:	c8 2f       	mov	r28, r24
float dutyReal;
pwm_time_on=MAX_HOLD;
     cbe:	8f ef       	ldi	r24, 0xFF	; 255
     cc0:	80 93 70 00 	sts	0x0070, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
     cc4:	60 91 70 00 	lds	r22, 0x0070
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 84 09 	call	0x1308	; 0x1308 <__floatunsisf>
     cd2:	6b 01       	movw	r12, r22
     cd4:	7c 01       	movw	r14, r24
}/*1*/
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
     cd6:	6c 2f       	mov	r22, r28
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 84 09 	call	0x1308	; 0x1308 <__floatunsisf>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	48 ec       	ldi	r20, 0xC8	; 200
     ce8:	52 e4       	ldi	r21, 0x42	; 66
     cea:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
     cfa:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fixunssfsi>
     cfe:	60 93 70 00 	sts	0x0070, r22
switch(pooling)
     d02:	80 91 74 00 	lds	r24, 0x0074
     d06:	88 23       	and	r24, r24
     d08:	19 f0       	breq	.+6      	; 0xd10 <timer0SwPWM+0x5e>
     d0a:	81 30       	cpi	r24, 0x01	; 1
     d0c:	29 f5       	brne	.+74     	; 0xd58 <timer0SwPWM+0xa6>
     d0e:	1f c0       	rjmp	.+62     	; 0xd4e <timer0SwPWM+0x9c>
{
	case 0:
	{
	timer0Start();
     d10:	0e 94 d2 05 	call	0xba4	; 0xba4 <timer0Start>
	timer0Set(pwm_time_on);
     d14:	80 91 70 00 	lds	r24, 0x0070
     d18:	0e 94 ce 05 	call	0xb9c	; 0xb9c <timer0Set>
	//freq 50KHZ is the Max frequency possible
	while ((TIFR&0x01)==0);
     d1c:	08 b6       	in	r0, 0x38	; 56
     d1e:	00 fe       	sbrs	r0, 0
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <timer0SwPWM+0x6a>
	TIFR |=0x01;
     d22:	88 b7       	in	r24, 0x38	; 56
     d24:	81 60       	ori	r24, 0x01	; 1
     d26:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA |=0xff;
     d28:	85 b3       	in	r24, 0x15	; 21
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	85 bb       	out	0x15, r24	; 21
	timer0Start();
     d2e:	0e 94 d2 05 	call	0xba4	; 0xba4 <timer0Start>
	timer0Set(MAX_HOLD-pwm_time_on);
     d32:	80 91 70 00 	lds	r24, 0x0070
     d36:	80 95       	com	r24
     d38:	0e 94 ce 05 	call	0xb9c	; 0xb9c <timer0Set>
	//freq
	while ((TIFR & 0x01)==0);
     d3c:	08 b6       	in	r0, 0x38	; 56
     d3e:	00 fe       	sbrs	r0, 0
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <timer0SwPWM+0x8a>
	TIFR |=0x01;
     d42:	88 b7       	in	r24, 0x38	; 56
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	88 bf       	out	0x38, r24	; 56
	PORTC_DATA &=0x00;
     d48:	85 b3       	in	r24, 0x15	; 21
     d4a:	15 ba       	out	0x15, r1	; 21

break;
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <timer0SwPWM+0xa6>
}
case 1:
{
timer0Start();
     d4e:	0e 94 d2 05 	call	0xba4	; 0xba4 <timer0Start>
OCR0=pwm_time_on;
     d52:	80 91 70 00 	lds	r24, 0x0070
     d56:	8c bf       	out	0x3c, r24	; 60
break;
}

}

}
     d58:	cf 91       	pop	r28
     d5a:	ff 90       	pop	r15
     d5c:	ef 90       	pop	r14
     d5e:	df 90       	pop	r13
     d60:	cf 90       	pop	r12
     d62:	08 95       	ret

00000d64 <Timer_interrupt_COMP_routine>:



void Timer_interrupt_COMP_routine(void)
{
	PORTD_DATA ^=0xff;
     d64:	82 b3       	in	r24, 0x12	; 18
     d66:	80 95       	com	r24
     d68:	82 bb       	out	0x12, r24	; 18

}
     d6a:	08 95       	ret

00000d6c <timer1Init>:
 */
void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC,
	En_timer1perscaler_t en_prescal,uint16_t u16_initialValue,
	uint16_t u16_outputCompareA,uint16_t u16_outputCompareB,
	 uint16_t u16_inputCapture,En_timer1Interrupt_t en_interruptMask)
 {
     d6c:	af 92       	push	r10
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	d9 01       	movw	r26, r18
     d78:	2a 2d       	mov	r18, r10
	TCCR1 |= en_mode | en_OC;
     d7a:	ee b5       	in	r30, 0x2e	; 46
     d7c:	ff b5       	in	r31, 0x2f	; 47
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	86 2b       	or	r24, r22
     d82:	97 2b       	or	r25, r23
     d84:	8e 2b       	or	r24, r30
     d86:	9f 2b       	or	r25, r31
     d88:	9f bd       	out	0x2f, r25	; 47
     d8a:	8e bd       	out	0x2e, r24	; 46
	u8g_T1_Prescaler=en_prescal;
     d8c:	40 93 71 00 	sts	0x0071, r20
	OCR1A =u16_outputCompareA;
     d90:	1b bd       	out	0x2b, r17	; 43
     d92:	0a bd       	out	0x2a, r16	; 42
	OCR1B =u16_outputCompareB;
     d94:	f9 bc       	out	0x29, r15	; 41
     d96:	e8 bc       	out	0x28, r14	; 40
	TCNT1=u16_initialValue;
     d98:	bd bd       	out	0x2d, r27	; 45
     d9a:	ac bd       	out	0x2c, r26	; 44
	switch(en_interruptMask)
     d9c:	28 30       	cpi	r18, 0x08	; 8
     d9e:	d1 f0       	breq	.+52     	; 0xdd4 <timer1Init+0x68>
     da0:	29 30       	cpi	r18, 0x09	; 9
     da2:	28 f4       	brcc	.+10     	; 0xdae <timer1Init+0x42>
     da4:	aa 20       	and	r10, r10
     da6:	51 f0       	breq	.+20     	; 0xdbc <timer1Init+0x50>
     da8:	24 30       	cpi	r18, 0x04	; 4
     daa:	f9 f4       	brne	.+62     	; 0xdea <timer1Init+0x7e>
     dac:	0b c0       	rjmp	.+22     	; 0xdc4 <timer1Init+0x58>
     dae:	20 32       	cpi	r18, 0x20	; 32
     db0:	a9 f0       	breq	.+42     	; 0xddc <timer1Init+0x70>
     db2:	2c 33       	cpi	r18, 0x3C	; 60
     db4:	b9 f0       	breq	.+46     	; 0xde4 <timer1Init+0x78>
     db6:	20 31       	cpi	r18, 0x10	; 16
     db8:	c1 f4       	brne	.+48     	; 0xdea <timer1Init+0x7e>
     dba:	08 c0       	rjmp	.+16     	; 0xdcc <timer1Init+0x60>
	{
		case T1_POLLING:
		{
			TIMSK &=0xC3;
     dbc:	89 b7       	in	r24, 0x39	; 57
     dbe:	83 7c       	andi	r24, 0xC3	; 195
     dc0:	89 bf       	out	0x39, r24	; 57
			/*	     OCIE0 ToIE0   ALL INTERRUPT T1    	OCIE0 ToIE0
			TIMSK &=  1     1        0 0 0 0 	           1     1
			All T1 Interrupts enable are cleared
			but other timers interrupt enable are not effected
			*/
		break;
     dc2:	13 c0       	rjmp	.+38     	; 0xdea <timer1Init+0x7e>
		}
		case T1_INTERRUPT_NORMAL:
		{
			TIMSK |=T1_INTERRUPT_NORMAL;
     dc4:	89 b7       	in	r24, 0x39	; 57
     dc6:	84 60       	ori	r24, 0x04	; 4
     dc8:	89 bf       	out	0x39, r24	; 57
		break;
     dca:	0f c0       	rjmp	.+30     	; 0xdea <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1A:
		{
			TIMSK |=T1_INTERRUPT_CMP_1A;
     dcc:	89 b7       	in	r24, 0x39	; 57
     dce:	80 61       	ori	r24, 0x10	; 16
     dd0:	89 bf       	out	0x39, r24	; 57
			break;
     dd2:	0b c0       	rjmp	.+22     	; 0xdea <timer1Init+0x7e>
		}
		case T1_INTERRUPT_CMP_1B:
		{
			TIMSK |=T1_INTERRUPT_CMP_1B;
     dd4:	89 b7       	in	r24, 0x39	; 57
     dd6:	88 60       	ori	r24, 0x08	; 8
     dd8:	89 bf       	out	0x39, r24	; 57
			break;
     dda:	07 c0       	rjmp	.+14     	; 0xdea <timer1Init+0x7e>
		}
		case T1_INTERRUPT_ICAPTURE:
		{
			TIMSK |=T1_INTERRUPT_ICAPTURE;
     ddc:	89 b7       	in	r24, 0x39	; 57
     dde:	80 62       	ori	r24, 0x20	; 32
     de0:	89 bf       	out	0x39, r24	; 57
			break;
     de2:	03 c0       	rjmp	.+6      	; 0xdea <timer1Init+0x7e>
		}
		case T1_INTERRUPT_All:
		{
			TIMSK|=T1_INTERRUPT_All;
     de4:	89 b7       	in	r24, 0x39	; 57
     de6:	8c 63       	ori	r24, 0x3C	; 60
     de8:	89 bf       	out	0x39, r24	; 57
	}




	}
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	af 90       	pop	r10
     df4:	08 95       	ret

00000df6 <timer1Set>:


void timer1Set(uint16_t u16_value)
{
TCNT1=u16_value;
     df6:	9d bd       	out	0x2d, r25	; 45
     df8:	8c bd       	out	0x2c, r24	; 44
}
     dfa:	08 95       	ret

00000dfc <timer1Read>:
 * Description:
 * @return TCNT1
 */
uint16_t timer1Read(void)
{
return TCNT1;
     dfc:	8c b5       	in	r24, 0x2c	; 44
     dfe:	9d b5       	in	r25, 0x2d	; 45
}
     e00:	08 95       	ret

00000e02 <timer1Start>:
 * Description:
 * @param
 */
void timer1Start(void)
{
TCCR1|=u8g_T1_Prescaler;
     e02:	2e b5       	in	r18, 0x2e	; 46
     e04:	3f b5       	in	r19, 0x2f	; 47
     e06:	80 91 71 00 	lds	r24, 0x0071
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	82 2b       	or	r24, r18
     e0e:	93 2b       	or	r25, r19
     e10:	9f bd       	out	0x2f, r25	; 47
     e12:	8e bd       	out	0x2e, r24	; 46
}
     e14:	08 95       	ret

00000e16 <timer1Stop>:
 * Description:
 * @param
 */
void timer1Stop(void)
{
TCCR1 &=0xfff8;
     e16:	8e b5       	in	r24, 0x2e	; 46
     e18:	9f b5       	in	r25, 0x2f	; 47
     e1a:	88 7f       	andi	r24, 0xF8	; 248
     e1c:	9f bd       	out	0x2f, r25	; 47
     e1e:	8e bd       	out	0x2e, r24	; 46
/*Keep all sittings as it is and put zeros in cs10,cs11,cs12*/
}
     e20:	08 95       	ret

00000e22 <timer1DelayMs>:
 */
void timer1DelayMs(uint16_t u16_delay_in_ms)
{


}
     e22:	08 95       	ret

00000e24 <timer1DelayUs>:
 */
void timer1DelayUs(uint32_t u32_delay_in_us)
{


}
     e24:	08 95       	ret

00000e26 <timer1SwPWM>:
 */
void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{


}
     e26:	08 95       	ret

00000e28 <timer2Set>:
* Description:
* @param value
*/
void timer2Set(uint8_t u8_a_value)
{
TCNT2=u8_a_value;
     e28:	84 bd       	out	0x24, r24	; 36
}
     e2a:	08 95       	ret

00000e2c <timer2Read>:
/**
* Description:
* @return
*/
uint8_t timer2Read(void){
return TCNT2;
     e2c:	84 b5       	in	r24, 0x24	; 36
}
     e2e:	08 95       	ret

00000e30 <timer2Start>:
/**
* Description:
*/
void timer2Start(void)
{
TCCR2 &= 0xf8;
     e30:	85 b5       	in	r24, 0x25	; 37
     e32:	88 7f       	andi	r24, 0xF8	; 248
     e34:	85 bd       	out	0x25, r24	; 37
TCCR2 |= Prescaler_Value2;
     e36:	95 b5       	in	r25, 0x25	; 37
     e38:	80 91 72 00 	lds	r24, 0x0072
     e3c:	89 2b       	or	r24, r25
     e3e:	85 bd       	out	0x25, r24	; 37
}
     e40:	08 95       	ret

00000e42 <timer2Stop>:
/**
* Description:
*/
void timer2Stop(void)
{
TCCR2 &= 0xf8;
     e42:	85 b5       	in	r24, 0x25	; 37
     e44:	88 7f       	andi	r24, 0xF8	; 248
     e46:	85 bd       	out	0x25, r24	; 37

}
     e48:	08 95       	ret

00000e4a <timer2Init>:


}

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC,En_timer2perscaler_t en_prescal2, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
     e4a:	cf 92       	push	r12
     e4c:	0f 93       	push	r16
if(en_prescal2 == T2_NO_CLOCK)
     e4e:	44 23       	and	r20, r20
     e50:	19 f4       	brne	.+6      	; 0xe58 <timer2Init+0xe>
{/*
if there is no clock the timer will be disabled
*/
timer2Stop();
     e52:	0e 94 21 07 	call	0xe42	; 0xe42 <timer2Stop>
     e56:	44 c0       	rjmp	.+136    	; 0xee0 <timer2Init+0x96>
}
else
{
TCCR2 |= en_mode|en_prescal2 ;
     e58:	95 b5       	in	r25, 0x25	; 37
     e5a:	89 2b       	or	r24, r25
     e5c:	84 2b       	or	r24, r20
     e5e:	85 bd       	out	0x25, r24	; 37
Prescaler_Value2=en_prescal2;
     e60:	40 93 72 00 	sts	0x0072, r20
TCNT2 = u8_initialValue;
     e64:	24 bd       	out	0x24, r18	; 36
switch(en_OC){
     e66:	60 31       	cpi	r22, 0x10	; 16
     e68:	71 f0       	breq	.+28     	; 0xe86 <timer2Init+0x3c>
     e6a:	61 31       	cpi	r22, 0x11	; 17
     e6c:	18 f4       	brcc	.+6      	; 0xe74 <timer2Init+0x2a>
     e6e:	66 23       	and	r22, r22
     e70:	31 f0       	breq	.+12     	; 0xe7e <timer2Init+0x34>
     e72:	14 c0       	rjmp	.+40     	; 0xe9c <timer2Init+0x52>
     e74:	60 32       	cpi	r22, 0x20	; 32
     e76:	59 f0       	breq	.+22     	; 0xe8e <timer2Init+0x44>
     e78:	60 33       	cpi	r22, 0x30	; 48
     e7a:	81 f4       	brne	.+32     	; 0xe9c <timer2Init+0x52>
     e7c:	0c c0       	rjmp	.+24     	; 0xe96 <timer2Init+0x4c>
	case  T2_OC2_DIS:
	{
	TCCR2 &= 0xCF;
     e7e:	85 b5       	in	r24, 0x25	; 37
     e80:	8f 7c       	andi	r24, 0xCF	; 207
     e82:	85 bd       	out	0x25, r24	; 37
		break;
     e84:	0b c0       	rjmp	.+22     	; 0xe9c <timer2Init+0x52>
	}
	case T2_OC2_TOGGLE:
	{
		TCCR2 |=T2_OC2_TOGGLE;
     e86:	85 b5       	in	r24, 0x25	; 37
     e88:	80 61       	ori	r24, 0x10	; 16
     e8a:	85 bd       	out	0x25, r24	; 37
		break;
     e8c:	07 c0       	rjmp	.+14     	; 0xe9c <timer2Init+0x52>
	}
	case  T2_OC2_CLEAR:
	{
	TCCR2 |= T2_OC2_CLEAR;
     e8e:	85 b5       	in	r24, 0x25	; 37
     e90:	80 62       	ori	r24, 0x20	; 32
     e92:	85 bd       	out	0x25, r24	; 37

		break;
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <timer2Init+0x52>
	}
	case T2_OC2_SET:
	{
		TCCR2 |=T2_OC2_SET;
     e96:	85 b5       	in	r24, 0x25	; 37
     e98:	80 63       	ori	r24, 0x30	; 48
     e9a:	85 bd       	out	0x25, r24	; 37
		break;
	}

}
OCR2  =u8_outputCompare;
     e9c:	03 bd       	out	0x23, r16	; 35
switch(en_interruptMask){
     e9e:	80 e4       	ldi	r24, 0x40	; 64
     ea0:	c8 16       	cp	r12, r24
     ea2:	51 f0       	breq	.+20     	; 0xeb8 <timer2Init+0x6e>
     ea4:	80 e8       	ldi	r24, 0x80	; 128
     ea6:	c8 16       	cp	r12, r24
     ea8:	81 f0       	breq	.+32     	; 0xeca <timer2Init+0x80>
     eaa:	cc 20       	and	r12, r12
     eac:	c9 f4       	brne	.+50     	; 0xee0 <timer2Init+0x96>
case  T2_POLLING:
pooling_2=0;
     eae:	10 92 73 00 	sts	0x0073, r1
//G_interrupt_Disable();
TIMSK &= T2_POLLING;
     eb2:	89 b7       	in	r24, 0x39	; 57
     eb4:	19 be       	out	0x39, r1	; 57
break;
     eb6:	14 c0       	rjmp	.+40     	; 0xee0 <timer2Init+0x96>
case T2_INTERRUPT_NORMAL :
{
	pooling_2=1;
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 73 00 	sts	0x0073, r24
G_interrupt_Enable();
     ebe:	0e 94 59 01 	call	0x2b2	; 0x2b2 <G_interrupt_Enable>
TIMSK |= T2_INTERRUPT_NORMAL;
     ec2:	89 b7       	in	r24, 0x39	; 57
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	89 bf       	out	0x39, r24	; 57
break;
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <timer2Init+0x96>
}
case T2_INTERRUPT_CMP:
{
	pooling_2=1;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 73 00 	sts	0x0073, r24
G_interrupt_Enable();
     ed0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <G_interrupt_Enable>
//SET_BIT(SREG,7);
TIMSK |=T2_INTERRUPT_NORMAL;
     ed4:	89 b7       	in	r24, 0x39	; 57
     ed6:	80 64       	ori	r24, 0x40	; 64
     ed8:	89 bf       	out	0x39, r24	; 57
TIMSK |=T2_INTERRUPT_CMP;
     eda:	89 b7       	in	r24, 0x39	; 57
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	89 bf       	out	0x39, r24	; 57

}



}
     ee0:	0f 91       	pop	r16
     ee2:	cf 90       	pop	r12
     ee4:	08 95       	ret

00000ee6 <timer2DelayMs>:
		Prescalercounst=1;
		break;

		}*/
void timer2DelayMs(uint16_t u16_delay_in_ms)
{
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	cf 93       	push	r28
     eec:	df 93       	push	r29
     eee:	00 d0       	rcall	.+0      	; 0xef0 <timer2DelayMs+0xa>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <timer2DelayMs+0xc>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	8c 01       	movw	r16, r24
	volatile uint16_t count=0;
     ef8:	1a 82       	std	Y+2, r1	; 0x02
     efa:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t Prescalercounst=0,set_timer2=0;
     efc:	1b 82       	std	Y+3, r1	; 0x03
     efe:	1c 82       	std	Y+4, r1	; 0x04
	switch(Prescaler_Value2)
     f00:	80 91 72 00 	lds	r24, 0x0072
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	f9 f0       	breq	.+62     	; 0xf46 <timer2DelayMs+0x60>
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	38 f4       	brcc	.+14     	; 0xf1a <timer2DelayMs+0x34>
     f0c:	82 30       	cpi	r24, 0x02	; 2
     f0e:	89 f0       	breq	.+34     	; 0xf32 <timer2DelayMs+0x4c>
     f10:	83 30       	cpi	r24, 0x03	; 3
     f12:	a0 f4       	brcc	.+40     	; 0xf3c <timer2DelayMs+0x56>
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	51 f5       	brne	.+84     	; 0xf6c <timer2DelayMs+0x86>
     f18:	07 c0       	rjmp	.+14     	; 0xf28 <timer2DelayMs+0x42>
     f1a:	86 30       	cpi	r24, 0x06	; 6
     f1c:	f1 f0       	breq	.+60     	; 0xf5a <timer2DelayMs+0x74>
     f1e:	86 30       	cpi	r24, 0x06	; 6
     f20:	b8 f0       	brcs	.+46     	; 0xf50 <timer2DelayMs+0x6a>
     f22:	87 30       	cpi	r24, 0x07	; 7
     f24:	19 f5       	brne	.+70     	; 0xf6c <timer2DelayMs+0x86>
     f26:	1e c0       	rjmp	.+60     	; 0xf64 <timer2DelayMs+0x7e>
	{
		case T2_PRESCALER_NO:{
		Prescalercounst=58;
     f28:	8a e3       	ldi	r24, 0x3A	; 58
     f2a:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=10;
     f2c:	8a e0       	ldi	r24, 0x0A	; 10
     f2e:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f30:	1d c0       	rjmp	.+58     	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_8:
		{Prescalercounst=8;
     f32:	88 e0       	ldi	r24, 0x08	; 8
     f34:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=12;
     f36:	8c e0       	ldi	r24, 0x0C	; 12
     f38:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f3a:	18 c0       	rjmp	.+48     	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_32:
		{Prescalercounst=2;
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=8;
     f40:	88 e0       	ldi	r24, 0x08	; 8
     f42:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f44:	13 c0       	rjmp	.+38     	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_64:
		{Prescalercounst=1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=6;
     f4a:	86 e0       	ldi	r24, 0x06	; 6
     f4c:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f4e:	0e c0       	rjmp	.+28     	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_128:
		{Prescalercounst=1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=131;
     f54:	83 e8       	ldi	r24, 0x83	; 131
     f56:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f58:	09 c0       	rjmp	.+18     	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_256:
		{Prescalercounst=1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=194;
     f5e:	82 ec       	ldi	r24, 0xC2	; 194
     f60:	8c 83       	std	Y+4, r24	; 0x04
		break;}
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <timer2DelayMs+0x86>
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	8b 83       	std	Y+3, r24	; 0x03
		set_timer2=240;
     f68:	80 ef       	ldi	r24, 0xF0	; 240
     f6a:	8c 83       	std	Y+4, r24	; 0x04
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f6c:	1a 82       	std	Y+2, r1	; 0x02
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	2b 81       	ldd	r18, Y+3	; 0x03
     f72:	49 81       	ldd	r20, Y+1	; 0x01
     f74:	5a 81       	ldd	r21, Y+2	; 0x02
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	02 9f       	mul	r16, r18
     f7a:	c0 01       	movw	r24, r0
     f7c:	03 9f       	mul	r16, r19
     f7e:	90 0d       	add	r25, r0
     f80:	12 9f       	mul	r17, r18
     f82:	90 0d       	add	r25, r0
     f84:	11 24       	eor	r1, r1
     f86:	48 17       	cp	r20, r24
     f88:	59 07       	cpc	r21, r25
     f8a:	e0 f4       	brcc	.+56     	; 0xfc4 <timer2DelayMs+0xde>
	{
		timer2Set(set_timer2);//10 for no prescaler....12 for 8 prescaler .... 8 for 32 prescaler ....6 for prescaler 64 .....
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	0e 94 14 07 	call	0xe28	; 0xe28 <timer2Set>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
     f92:	08 b6       	in	r0, 0x38	; 56
     f94:	06 fe       	sbrs	r0, 6
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <timer2DelayMs+0xac>
		TIFR |=0x40;
     f98:	88 b7       	in	r24, 0x38	; 56
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	88 bf       	out	0x38, r24	; 56
		case T2_PRESCALER_1024:
		{Prescalercounst=1;
		set_timer2=240;
		break;}
	}
	for (count=0;count<(u16_delay_in_ms*Prescalercounst);count++)
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	01 96       	adiw	r24, 0x01	; 1
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	49 81       	ldd	r20, Y+1	; 0x01
     fac:	5a 81       	ldd	r21, Y+2	; 0x02
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	02 9f       	mul	r16, r18
     fb2:	c0 01       	movw	r24, r0
     fb4:	03 9f       	mul	r16, r19
     fb6:	90 0d       	add	r25, r0
     fb8:	12 9f       	mul	r17, r18
     fba:	90 0d       	add	r25, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	48 17       	cp	r20, r24
     fc0:	59 07       	cpc	r21, r25
     fc2:	20 f3       	brcs	.-56     	; 0xf8c <timer2DelayMs+0xa6>
		//131 for 128 prescaler.......194 for 256 prescaler....240 for 1024
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	08 95       	ret

00000fd6 <timer2DelayUs>:

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
     fd6:	cf 92       	push	r12
     fd8:	df 92       	push	r13
     fda:	ef 92       	push	r14
     fdc:	ff 92       	push	r15
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <timer2DelayUs+0xe>
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	6b 01       	movw	r12, r22
     fea:	7c 01       	movw	r14, r24
	volatile uint16_t count =0;
     fec:	1a 82       	std	Y+2, r1	; 0x02
     fee:	19 82       	std	Y+1, r1	; 0x01
	for (count=0;count<u16_delay_in_us;count++)
     ff0:	1a 82       	std	Y+2, r1	; 0x02
     ff2:	19 82       	std	Y+1, r1	; 0x01
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	9a 81       	ldd	r25, Y+2	; 0x02
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	8c 15       	cp	r24, r12
     ffe:	9d 05       	cpc	r25, r13
    1000:	ae 05       	cpc	r26, r14
    1002:	bf 05       	cpc	r27, r15
    1004:	b8 f4       	brcc	.+46     	; 0x1034 <timer2DelayUs+0x5e>
	{
		timer2Set(254);//254 for no prescaler
    1006:	8e ef       	ldi	r24, 0xFE	; 254
    1008:	0e 94 14 07 	call	0xe28	; 0xe28 <timer2Set>
		while ((TIFR & 0x40)==0);
    100c:	08 b6       	in	r0, 0x38	; 56
    100e:	06 fe       	sbrs	r0, 6
    1010:	fd cf       	rjmp	.-6      	; 0x100c <timer2DelayUs+0x36>
		TIFR |=0x40;
    1012:	88 b7       	in	r24, 0x38	; 56
    1014:	80 64       	ori	r24, 0x40	; 64
    1016:	88 bf       	out	0x38, r24	; 56

/*Always No prescaler...pooling ...timer2Set(240)*/
void timer2DelayUs(uint32_t u16_delay_in_us)
{
	volatile uint16_t count =0;
	for (count=0;count<u16_delay_in_us;count++)
    1018:	89 81       	ldd	r24, Y+1	; 0x01
    101a:	9a 81       	ldd	r25, Y+2	; 0x02
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	9a 81       	ldd	r25, Y+2	; 0x02
    1026:	a0 e0       	ldi	r26, 0x00	; 0
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	8c 15       	cp	r24, r12
    102c:	9d 05       	cpc	r25, r13
    102e:	ae 05       	cpc	r26, r14
    1030:	bf 05       	cpc	r27, r15
    1032:	48 f3       	brcs	.-46     	; 0x1006 <timer2DelayUs+0x30>
		while ((TIFR & 0x40)==0);
		TIFR |=0x40;

	}

}
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <timer2SwPWM>:
/**
* Description:
* @param dutyCycle
*/
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1046:	cf 92       	push	r12
    1048:	df 92       	push	r13
    104a:	ef 92       	push	r14
    104c:	ff 92       	push	r15
    104e:	cf 93       	push	r28
    1050:	c8 2f       	mov	r28, r24

float dutyReal;
pwm_time_on=MAX_HOLD;
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	80 93 70 00 	sts	0x0070, r24
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
pwm_time_on=(float)pwm_time_on*dutyReal;
    1058:	60 91 70 00 	lds	r22, 0x0070
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 84 09 	call	0x1308	; 0x1308 <__floatunsisf>
    1066:	6b 01       	movw	r12, r22
    1068:	7c 01       	movw	r14, r24
void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{

float dutyReal;
pwm_time_on=MAX_HOLD;
dutyReal=((float)u8_dutyCycle/(float)FULL_SPEED);
    106a:	6c 2f       	mov	r22, r28
    106c:	70 e0       	ldi	r23, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 84 09 	call	0x1308	; 0x1308 <__floatunsisf>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	48 ec       	ldi	r20, 0xC8	; 200
    107c:	52 e4       	ldi	r21, 0x42	; 66
    107e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <__divsf3>
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
pwm_time_on=(float)pwm_time_on*dutyReal;
    1086:	c7 01       	movw	r24, r14
    1088:	b6 01       	movw	r22, r12
    108a:	0e 94 12 0a 	call	0x1424	; 0x1424 <__mulsf3>
    108e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__fixunssfsi>
    1092:	60 93 70 00 	sts	0x0070, r22
switch(pooling_2)
    1096:	80 91 73 00 	lds	r24, 0x0073
    109a:	88 23       	and	r24, r24
    109c:	19 f0       	breq	.+6      	; 0x10a4 <timer2SwPWM+0x5e>
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	29 f5       	brne	.+74     	; 0x10ec <timer2SwPWM+0xa6>
    10a2:	1f c0       	rjmp	.+62     	; 0x10e2 <timer2SwPWM+0x9c>
{
	case 0:
	{
		timer2Start();
    10a4:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
		timer2Set(pwm_time_on);
    10a8:	80 91 70 00 	lds	r24, 0x0070
    10ac:	0e 94 14 07 	call	0xe28	; 0xe28 <timer2Set>
		//freq 50KHZ is the Max frequency possible
		while ((TIFR&0x04)==0);
    10b0:	08 b6       	in	r0, 0x38	; 56
    10b2:	02 fe       	sbrs	r0, 2
    10b4:	fd cf       	rjmp	.-6      	; 0x10b0 <timer2SwPWM+0x6a>
		TIFR |=0x04;
    10b6:	88 b7       	in	r24, 0x38	; 56
    10b8:	84 60       	ori	r24, 0x04	; 4
    10ba:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA |=0xff;
    10bc:	85 b3       	in	r24, 0x15	; 21
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	85 bb       	out	0x15, r24	; 21
		timer2Start();
    10c2:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
		timer2Set(MAX_HOLD-pwm_time_on);
    10c6:	80 91 70 00 	lds	r24, 0x0070
    10ca:	80 95       	com	r24
    10cc:	0e 94 14 07 	call	0xe28	; 0xe28 <timer2Set>
		//freq
		while ((TIFR & 0x04)==0);
    10d0:	08 b6       	in	r0, 0x38	; 56
    10d2:	02 fe       	sbrs	r0, 2
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <timer2SwPWM+0x8a>
		TIFR |=0x04;
    10d6:	88 b7       	in	r24, 0x38	; 56
    10d8:	84 60       	ori	r24, 0x04	; 4
    10da:	88 bf       	out	0x38, r24	; 56
		PORTC_DATA &=0x00;
    10dc:	85 b3       	in	r24, 0x15	; 21
    10de:	15 ba       	out	0x15, r1	; 21

		break;
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <timer2SwPWM+0xa6>
	}
	case 1:
	{
		timer2Start();
    10e2:	0e 94 18 07 	call	0xe30	; 0xe30 <timer2Start>
		OCR2=pwm_time_on;
    10e6:	80 91 70 00 	lds	r24, 0x0070
    10ea:	83 bd       	out	0x23, r24	; 35
	}

}


}
    10ec:	cf 91       	pop	r28
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	08 95       	ret

000010f8 <Timer2_interrupt_COMP_routine>:
void Timer2_interrupt_COMP_routine(void)
{



}
    10f8:	08 95       	ret

000010fa <Timer2_interrupt_routine>:
void Timer2_interrupt_routine(void)
{


}
    10fa:	08 95       	ret

000010fc <Uart_Init>:
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    10fc:	0f 93       	push	r16
switch (Baud_rate) {
    10fe:	83 33       	cpi	r24, 0x33	; 51
    1100:	71 f0       	breq	.+28     	; 0x111e <Uart_Init+0x22>
    1102:	84 33       	cpi	r24, 0x34	; 52
    1104:	18 f4       	brcc	.+6      	; 0x110c <Uart_Init+0x10>
    1106:	89 31       	cpi	r24, 0x19	; 25
    1108:	79 f4       	brne	.+30     	; 0x1128 <Uart_Init+0x2c>
    110a:	0c c0       	rjmp	.+24     	; 0x1124 <Uart_Init+0x28>
    110c:	84 34       	cpi	r24, 0x44	; 68
    110e:	21 f0       	breq	.+8      	; 0x1118 <Uart_Init+0x1c>
    1110:	87 36       	cpi	r24, 0x67	; 103
    1112:	51 f4       	brne	.+20     	; 0x1128 <Uart_Init+0x2c>
  case Baud9600:
  UBRRL=Baud9600;
    1114:	89 b9       	out	0x09, r24	; 9
  break;
    1116:	08 c0       	rjmp	.+16     	; 0x1128 <Uart_Init+0x2c>
  case Baud14400:
  UBRRL=Baud14400;
    1118:	84 e4       	ldi	r24, 0x44	; 68
    111a:	89 b9       	out	0x09, r24	; 9
  break;
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <Uart_Init+0x2c>
  case Baud19200:
  UBRRL=Baud19200;
    111e:	83 e3       	ldi	r24, 0x33	; 51
    1120:	89 b9       	out	0x09, r24	; 9
  break;
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <Uart_Init+0x2c>
  case Baud38400:
  UBRRL=Baud38400;
    1124:	89 e1       	ldi	r24, 0x19	; 25
    1126:	89 b9       	out	0x09, r24	; 9
  break;
}
switch (Stop_bits_num) {
    1128:	66 23       	and	r22, r22
    112a:	31 f0       	breq	.+12     	; 0x1138 <Uart_Init+0x3c>
    112c:	61 30       	cpi	r22, 0x01	; 1
    112e:	11 f0       	breq	.+4      	; 0x1134 <Uart_Init+0x38>
uint8_t BufferRequested[Buffer_Size];
volatile uint8_t u8_index=0;
volatile uint8_t buf_is_full=0;
void Uart_Init(En_BAUD_Rate Baud_rate,En_Stop_config Stop_bits_num,
  EN_Parity parity_Bit,EN_Data_Size data_num_bits,EN_UartMode uart_mode)
{uint8_t Buffer=0;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	03 c0       	rjmp	.+6      	; 0x113a <Uart_Init+0x3e>
  break;
}
case TwoStopBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
    1134:	88 e8       	ldi	r24, 0x88	; 136
  break;
    1136:	01 c0       	rjmp	.+2      	; 0x113a <Uart_Init+0x3e>
  break;
}
switch (Stop_bits_num) {
case OneStopBit:
{ SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,USBS);
    1138:	80 e8       	ldi	r24, 0x80	; 128
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,USBS);
  break;
}
}
switch (data_num_bits)
    113a:	22 30       	cpi	r18, 0x02	; 2
    113c:	a1 f0       	breq	.+40     	; 0x1166 <Uart_Init+0x6a>
    113e:	23 30       	cpi	r18, 0x03	; 3
    1140:	28 f4       	brcc	.+10     	; 0x114c <Uart_Init+0x50>
    1142:	22 23       	and	r18, r18
    1144:	41 f0       	breq	.+16     	; 0x1156 <Uart_Init+0x5a>
    1146:	21 30       	cpi	r18, 0x01	; 1
    1148:	b9 f4       	brne	.+46     	; 0x1178 <Uart_Init+0x7c>
    114a:	09 c0       	rjmp	.+18     	; 0x115e <Uart_Init+0x62>
    114c:	23 30       	cpi	r18, 0x03	; 3
    114e:	79 f0       	breq	.+30     	; 0x116e <Uart_Init+0x72>
    1150:	24 30       	cpi	r18, 0x04	; 4
    1152:	91 f4       	brne	.+36     	; 0x1178 <Uart_Init+0x7c>
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <Uart_Init+0x78>
{
case FiveBits:
{
SET_BIT(Buffer,URSEL);
    1156:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UCSZ0);
CLEAR_BIT(Buffer,UCSZ1);
    1158:	89 7f       	andi	r24, 0xF9	; 249
CLEAR_BIT(UCSRB,UCSZ2);
    115a:	52 98       	cbi	0x0a, 2	; 10
break;
    115c:	0d c0       	rjmp	.+26     	; 0x1178 <Uart_Init+0x7c>
}
case SexBits:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UCSZ0);
    115e:	82 68       	ori	r24, 0x82	; 130
  CLEAR_BIT(Buffer,UCSZ1);
    1160:	8b 7f       	andi	r24, 0xFB	; 251
  CLEAR_BIT(UCSRB,UCSZ2);
    1162:	52 98       	cbi	0x0a, 2	; 10
  break;
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <Uart_Init+0x7c>
}
case SevenBits:
{
  SET_BIT(Buffer,URSEL);
  CLEAR_BIT(Buffer,UCSZ0);
    1166:	89 77       	andi	r24, 0x79	; 121
  SET_BIT(Buffer,UCSZ1);
    1168:	84 68       	ori	r24, 0x84	; 132
  CLEAR_BIT(UCSRB,UCSZ2);
    116a:	52 98       	cbi	0x0a, 2	; 10
  break;
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <Uart_Init+0x7c>
}
case EightBits:
{   SET_BIT(Buffer,URSEL);
    SET_BIT(Buffer,UCSZ0);
    SET_BIT(Buffer,UCSZ1);
    116e:	86 68       	ori	r24, 0x86	; 134
    CLEAR_BIT(UCSRB,UCSZ2);
    1170:	52 98       	cbi	0x0a, 2	; 10
break;
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <Uart_Init+0x7c>
}

case NineBits:
{   SET_BIT(Buffer,URSEL);
	SET_BIT(Buffer,UCSZ0);
	SET_BIT(Buffer,UCSZ1);
    1174:	86 68       	ori	r24, 0x86	; 134
	SET_BIT(UCSRB,UCSZ2);
    1176:	52 9a       	sbi	0x0a, 2	; 10
	break;
}

}

switch (uart_mode) {
    1178:	00 23       	and	r16, r16
    117a:	19 f0       	breq	.+6      	; 0x1182 <Uart_Init+0x86>
    117c:	01 30       	cpi	r16, 0x01	; 1
    117e:	29 f4       	brne	.+10     	; 0x118a <Uart_Init+0x8e>
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <Uart_Init+0x8c>
  case ASynchronous:
  {
  SET_BIT(Buffer,URSEL);
    1182:	80 68       	ori	r24, 0x80	; 128
  CLEAR_BIT(Buffer,UMSEL);
    1184:	8f 7b       	andi	r24, 0xBF	; 191
  break;
    1186:	01 c0       	rjmp	.+2      	; 0x118a <Uart_Init+0x8e>
  }
case Synchronous:
{
  SET_BIT(Buffer,URSEL);
  SET_BIT(Buffer,UMSEL);
    1188:	80 6c       	ori	r24, 0xC0	; 192
  break;
}
}
switch (parity_Bit) {
    118a:	41 30       	cpi	r20, 0x01	; 1
    118c:	41 f0       	breq	.+16     	; 0x119e <Uart_Init+0xa2>
    118e:	41 30       	cpi	r20, 0x01	; 1
    1190:	18 f0       	brcs	.+6      	; 0x1198 <Uart_Init+0x9c>
    1192:	42 30       	cpi	r20, 0x02	; 2
    1194:	41 f4       	brne	.+16     	; 0x11a6 <Uart_Init+0xaa>
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <Uart_Init+0xa8>
  case NoParity:
{
SET_BIT(Buffer,URSEL);
    1198:	80 68       	ori	r24, 0x80	; 128
CLEAR_BIT(Buffer,UPM0);
CLEAR_BIT(Buffer,UPM1);
    119a:	8f 7c       	andi	r24, 0xCF	; 207
  break;
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <Uart_Init+0xaa>
}
case EvenParity:
{
SET_BIT(Buffer,URSEL);
CLEAR_BIT(Buffer,UPM0);
    119e:	8f 74       	andi	r24, 0x4F	; 79
SET_BIT(Buffer,UPM1);
    11a0:	80 6a       	ori	r24, 0xA0	; 160
break;
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <Uart_Init+0xaa>
}
case OddParity:
{
SET_BIT(Buffer,URSEL);
SET_BIT(Buffer,UPM1);
SET_BIT(Buffer,UPM0);
    11a4:	80 6b       	ori	r24, 0xB0	; 176
}


}

UCSRC=Buffer;
    11a6:	80 bd       	out	0x20, r24	; 32
SET_BIT(UCSRB,TXEN);/*TXEN*/
    11a8:	53 9a       	sbi	0x0a, 3	; 10
SET_BIT(UCSRB,RXEN);/*RXEN*/
    11aa:	54 9a       	sbi	0x0a, 4	; 10
}
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <UartTransmitPooling>:
void UartTransmitPooling(uint8_t Data)
{
while( !( UCSRA & (1<<UDRE)));
    11b0:	5d 9b       	sbis	0x0b, 5	; 11
    11b2:	fe cf       	rjmp	.-4      	; 0x11b0 <UartTransmitPooling>
UDR=Data;
    11b4:	8c b9       	out	0x0c, r24	; 12
}
    11b6:	08 95       	ret

000011b8 <UartRecievePooling>:
uint8_t UartRecievePooling(void)
{
	uint8_t data=0;
while (!( UCSRA & (1 << RXC)));/* Wait until new data receive*/
    11b8:	5f 9b       	sbis	0x0b, 7	; 11
    11ba:	fe cf       	rjmp	.-4      	; 0x11b8 <UartRecievePooling>
data=UDR;
    11bc:	8c b1       	in	r24, 0x0c	; 12
return data;									/* Get and return received data */
}
    11be:	08 95       	ret

000011c0 <Enable_communication_interrupt>:


void Enable_communication_interrupt(void)
{
G_interrupt_Enable();
    11c0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <G_interrupt_Enable>
SET_BIT(UCSRB,RXCIE);
    11c4:	57 9a       	sbi	0x0a, 7	; 10
SET_BIT(UCSRB,TXCIE);
    11c6:	56 9a       	sbi	0x0a, 6	; 10
SET_BIT(SPCR,SPIE);
    11c8:	6f 9a       	sbi	0x0d, 7	; 13
}
    11ca:	08 95       	ret

000011cc <UartRecieveInterrupt>:
//  buf_is_full=1;
//  u16_index=0;
//      }
/*if(u8_index<Buffer_Size)
{
  */u8_DATA=UDR;/*
    11cc:	8c b1       	in	r24, 0x0c	; 12
    11ce:	80 93 60 00 	sts	0x0060, r24
  u8_index++;
}
  else{
    u8_index=0;
  }*/
}
    11d2:	08 95       	ret

000011d4 <UartTransmitInterrupt>:
that changes its data
*/
//UDR=u8_DATA;
//G_interrupt_Enable();
//u8_DATA ^=0xFF;
}
    11d4:	08 95       	ret

000011d6 <UartTransmitdataInt>:
void UartTransmitdataInt(uint8_t data_to_transmit)
{
	  u8_DATA=data_to_transmit;
    11d6:	80 93 60 00 	sts	0x0060, r24
}
    11da:	08 95       	ret

000011dc <Uart_tryansmitfirstbyte>:

void Uart_tryansmitfirstbyte(uint8_t data)
{
UDR=data;
    11dc:	8c b9       	out	0x0c, r24	; 12
}
    11de:	08 95       	ret

000011e0 <__divsf3>:
    11e0:	0c d0       	rcall	.+24     	; 0x11fa <__divsf3x>
    11e2:	e6 c0       	rjmp	.+460    	; 0x13b0 <__fp_round>
    11e4:	de d0       	rcall	.+444    	; 0x13a2 <__fp_pscB>
    11e6:	40 f0       	brcs	.+16     	; 0x11f8 <__divsf3+0x18>
    11e8:	d5 d0       	rcall	.+426    	; 0x1394 <__fp_pscA>
    11ea:	30 f0       	brcs	.+12     	; 0x11f8 <__divsf3+0x18>
    11ec:	21 f4       	brne	.+8      	; 0x11f6 <__divsf3+0x16>
    11ee:	5f 3f       	cpi	r21, 0xFF	; 255
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <__divsf3+0x18>
    11f2:	c7 c0       	rjmp	.+398    	; 0x1382 <__fp_inf>
    11f4:	51 11       	cpse	r21, r1
    11f6:	10 c1       	rjmp	.+544    	; 0x1418 <__fp_szero>
    11f8:	ca c0       	rjmp	.+404    	; 0x138e <__fp_nan>

000011fa <__divsf3x>:
    11fa:	eb d0       	rcall	.+470    	; 0x13d2 <__fp_split3>
    11fc:	98 f3       	brcs	.-26     	; 0x11e4 <__divsf3+0x4>

000011fe <__divsf3_pse>:
    11fe:	99 23       	and	r25, r25
    1200:	c9 f3       	breq	.-14     	; 0x11f4 <__divsf3+0x14>
    1202:	55 23       	and	r21, r21
    1204:	b1 f3       	breq	.-20     	; 0x11f2 <__divsf3+0x12>
    1206:	95 1b       	sub	r25, r21
    1208:	55 0b       	sbc	r21, r21
    120a:	bb 27       	eor	r27, r27
    120c:	aa 27       	eor	r26, r26
    120e:	62 17       	cp	r22, r18
    1210:	73 07       	cpc	r23, r19
    1212:	84 07       	cpc	r24, r20
    1214:	38 f0       	brcs	.+14     	; 0x1224 <__divsf3_pse+0x26>
    1216:	9f 5f       	subi	r25, 0xFF	; 255
    1218:	5f 4f       	sbci	r21, 0xFF	; 255
    121a:	22 0f       	add	r18, r18
    121c:	33 1f       	adc	r19, r19
    121e:	44 1f       	adc	r20, r20
    1220:	aa 1f       	adc	r26, r26
    1222:	a9 f3       	breq	.-22     	; 0x120e <__divsf3_pse+0x10>
    1224:	33 d0       	rcall	.+102    	; 0x128c <__divsf3_pse+0x8e>
    1226:	0e 2e       	mov	r0, r30
    1228:	3a f0       	brmi	.+14     	; 0x1238 <__divsf3_pse+0x3a>
    122a:	e0 e8       	ldi	r30, 0x80	; 128
    122c:	30 d0       	rcall	.+96     	; 0x128e <__divsf3_pse+0x90>
    122e:	91 50       	subi	r25, 0x01	; 1
    1230:	50 40       	sbci	r21, 0x00	; 0
    1232:	e6 95       	lsr	r30
    1234:	00 1c       	adc	r0, r0
    1236:	ca f7       	brpl	.-14     	; 0x122a <__divsf3_pse+0x2c>
    1238:	29 d0       	rcall	.+82     	; 0x128c <__divsf3_pse+0x8e>
    123a:	fe 2f       	mov	r31, r30
    123c:	27 d0       	rcall	.+78     	; 0x128c <__divsf3_pse+0x8e>
    123e:	66 0f       	add	r22, r22
    1240:	77 1f       	adc	r23, r23
    1242:	88 1f       	adc	r24, r24
    1244:	bb 1f       	adc	r27, r27
    1246:	26 17       	cp	r18, r22
    1248:	37 07       	cpc	r19, r23
    124a:	48 07       	cpc	r20, r24
    124c:	ab 07       	cpc	r26, r27
    124e:	b0 e8       	ldi	r27, 0x80	; 128
    1250:	09 f0       	breq	.+2      	; 0x1254 <__divsf3_pse+0x56>
    1252:	bb 0b       	sbc	r27, r27
    1254:	80 2d       	mov	r24, r0
    1256:	bf 01       	movw	r22, r30
    1258:	ff 27       	eor	r31, r31
    125a:	93 58       	subi	r25, 0x83	; 131
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	2a f0       	brmi	.+10     	; 0x126a <__divsf3_pse+0x6c>
    1260:	9e 3f       	cpi	r25, 0xFE	; 254
    1262:	51 05       	cpc	r21, r1
    1264:	68 f0       	brcs	.+26     	; 0x1280 <__divsf3_pse+0x82>
    1266:	8d c0       	rjmp	.+282    	; 0x1382 <__fp_inf>
    1268:	d7 c0       	rjmp	.+430    	; 0x1418 <__fp_szero>
    126a:	5f 3f       	cpi	r21, 0xFF	; 255
    126c:	ec f3       	brlt	.-6      	; 0x1268 <__divsf3_pse+0x6a>
    126e:	98 3e       	cpi	r25, 0xE8	; 232
    1270:	dc f3       	brlt	.-10     	; 0x1268 <__divsf3_pse+0x6a>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b7 95       	ror	r27
    127a:	f7 95       	ror	r31
    127c:	9f 5f       	subi	r25, 0xFF	; 255
    127e:	c9 f7       	brne	.-14     	; 0x1272 <__divsf3_pse+0x74>
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret
    128c:	e1 e0       	ldi	r30, 0x01	; 1
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	bb 1f       	adc	r27, r27
    1296:	62 17       	cp	r22, r18
    1298:	73 07       	cpc	r23, r19
    129a:	84 07       	cpc	r24, r20
    129c:	ba 07       	cpc	r27, r26
    129e:	20 f0       	brcs	.+8      	; 0x12a8 <__divsf3_pse+0xaa>
    12a0:	62 1b       	sub	r22, r18
    12a2:	73 0b       	sbc	r23, r19
    12a4:	84 0b       	sbc	r24, r20
    12a6:	ba 0b       	sbc	r27, r26
    12a8:	ee 1f       	adc	r30, r30
    12aa:	88 f7       	brcc	.-30     	; 0x128e <__divsf3_pse+0x90>
    12ac:	e0 95       	com	r30
    12ae:	08 95       	ret

000012b0 <__fixunssfsi>:
    12b0:	98 d0       	rcall	.+304    	; 0x13e2 <__fp_splitA>
    12b2:	88 f0       	brcs	.+34     	; 0x12d6 <__fixunssfsi+0x26>
    12b4:	9f 57       	subi	r25, 0x7F	; 127
    12b6:	90 f0       	brcs	.+36     	; 0x12dc <__fixunssfsi+0x2c>
    12b8:	b9 2f       	mov	r27, r25
    12ba:	99 27       	eor	r25, r25
    12bc:	b7 51       	subi	r27, 0x17	; 23
    12be:	a0 f0       	brcs	.+40     	; 0x12e8 <__fixunssfsi+0x38>
    12c0:	d1 f0       	breq	.+52     	; 0x12f6 <__fixunssfsi+0x46>
    12c2:	66 0f       	add	r22, r22
    12c4:	77 1f       	adc	r23, r23
    12c6:	88 1f       	adc	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	1a f0       	brmi	.+6      	; 0x12d2 <__fixunssfsi+0x22>
    12cc:	ba 95       	dec	r27
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__fixunssfsi+0x12>
    12d0:	12 c0       	rjmp	.+36     	; 0x12f6 <__fixunssfsi+0x46>
    12d2:	b1 30       	cpi	r27, 0x01	; 1
    12d4:	81 f0       	breq	.+32     	; 0x12f6 <__fixunssfsi+0x46>
    12d6:	9f d0       	rcall	.+318    	; 0x1416 <__fp_zero>
    12d8:	b1 e0       	ldi	r27, 0x01	; 1
    12da:	08 95       	ret
    12dc:	9c c0       	rjmp	.+312    	; 0x1416 <__fp_zero>
    12de:	67 2f       	mov	r22, r23
    12e0:	78 2f       	mov	r23, r24
    12e2:	88 27       	eor	r24, r24
    12e4:	b8 5f       	subi	r27, 0xF8	; 248
    12e6:	39 f0       	breq	.+14     	; 0x12f6 <__fixunssfsi+0x46>
    12e8:	b9 3f       	cpi	r27, 0xF9	; 249
    12ea:	cc f3       	brlt	.-14     	; 0x12de <__fixunssfsi+0x2e>
    12ec:	86 95       	lsr	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b3 95       	inc	r27
    12f4:	d9 f7       	brne	.-10     	; 0x12ec <__fixunssfsi+0x3c>
    12f6:	3e f4       	brtc	.+14     	; 0x1306 <__fixunssfsi+0x56>
    12f8:	90 95       	com	r25
    12fa:	80 95       	com	r24
    12fc:	70 95       	com	r23
    12fe:	61 95       	neg	r22
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	8f 4f       	sbci	r24, 0xFF	; 255
    1304:	9f 4f       	sbci	r25, 0xFF	; 255
    1306:	08 95       	ret

00001308 <__floatunsisf>:
    1308:	e8 94       	clt
    130a:	09 c0       	rjmp	.+18     	; 0x131e <__floatsisf+0x12>

0000130c <__floatsisf>:
    130c:	97 fb       	bst	r25, 7
    130e:	3e f4       	brtc	.+14     	; 0x131e <__floatsisf+0x12>
    1310:	90 95       	com	r25
    1312:	80 95       	com	r24
    1314:	70 95       	com	r23
    1316:	61 95       	neg	r22
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	99 23       	and	r25, r25
    1320:	a9 f0       	breq	.+42     	; 0x134c <__floatsisf+0x40>
    1322:	f9 2f       	mov	r31, r25
    1324:	96 e9       	ldi	r25, 0x96	; 150
    1326:	bb 27       	eor	r27, r27
    1328:	93 95       	inc	r25
    132a:	f6 95       	lsr	r31
    132c:	87 95       	ror	r24
    132e:	77 95       	ror	r23
    1330:	67 95       	ror	r22
    1332:	b7 95       	ror	r27
    1334:	f1 11       	cpse	r31, r1
    1336:	f8 cf       	rjmp	.-16     	; 0x1328 <__floatsisf+0x1c>
    1338:	fa f4       	brpl	.+62     	; 0x1378 <__floatsisf+0x6c>
    133a:	bb 0f       	add	r27, r27
    133c:	11 f4       	brne	.+4      	; 0x1342 <__floatsisf+0x36>
    133e:	60 ff       	sbrs	r22, 0
    1340:	1b c0       	rjmp	.+54     	; 0x1378 <__floatsisf+0x6c>
    1342:	6f 5f       	subi	r22, 0xFF	; 255
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	8f 4f       	sbci	r24, 0xFF	; 255
    1348:	9f 4f       	sbci	r25, 0xFF	; 255
    134a:	16 c0       	rjmp	.+44     	; 0x1378 <__floatsisf+0x6c>
    134c:	88 23       	and	r24, r24
    134e:	11 f0       	breq	.+4      	; 0x1354 <__floatsisf+0x48>
    1350:	96 e9       	ldi	r25, 0x96	; 150
    1352:	11 c0       	rjmp	.+34     	; 0x1376 <__floatsisf+0x6a>
    1354:	77 23       	and	r23, r23
    1356:	21 f0       	breq	.+8      	; 0x1360 <__floatsisf+0x54>
    1358:	9e e8       	ldi	r25, 0x8E	; 142
    135a:	87 2f       	mov	r24, r23
    135c:	76 2f       	mov	r23, r22
    135e:	05 c0       	rjmp	.+10     	; 0x136a <__floatsisf+0x5e>
    1360:	66 23       	and	r22, r22
    1362:	71 f0       	breq	.+28     	; 0x1380 <__floatsisf+0x74>
    1364:	96 e8       	ldi	r25, 0x86	; 134
    1366:	86 2f       	mov	r24, r22
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	2a f0       	brmi	.+10     	; 0x1378 <__floatsisf+0x6c>
    136e:	9a 95       	dec	r25
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	da f7       	brpl	.-10     	; 0x136e <__floatsisf+0x62>
    1378:	88 0f       	add	r24, r24
    137a:	96 95       	lsr	r25
    137c:	87 95       	ror	r24
    137e:	97 f9       	bld	r25, 7
    1380:	08 95       	ret

00001382 <__fp_inf>:
    1382:	97 f9       	bld	r25, 7
    1384:	9f 67       	ori	r25, 0x7F	; 127
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	70 e0       	ldi	r23, 0x00	; 0
    138a:	60 e0       	ldi	r22, 0x00	; 0
    138c:	08 95       	ret

0000138e <__fp_nan>:
    138e:	9f ef       	ldi	r25, 0xFF	; 255
    1390:	80 ec       	ldi	r24, 0xC0	; 192
    1392:	08 95       	ret

00001394 <__fp_pscA>:
    1394:	00 24       	eor	r0, r0
    1396:	0a 94       	dec	r0
    1398:	16 16       	cp	r1, r22
    139a:	17 06       	cpc	r1, r23
    139c:	18 06       	cpc	r1, r24
    139e:	09 06       	cpc	r0, r25
    13a0:	08 95       	ret

000013a2 <__fp_pscB>:
    13a2:	00 24       	eor	r0, r0
    13a4:	0a 94       	dec	r0
    13a6:	12 16       	cp	r1, r18
    13a8:	13 06       	cpc	r1, r19
    13aa:	14 06       	cpc	r1, r20
    13ac:	05 06       	cpc	r0, r21
    13ae:	08 95       	ret

000013b0 <__fp_round>:
    13b0:	09 2e       	mov	r0, r25
    13b2:	03 94       	inc	r0
    13b4:	00 0c       	add	r0, r0
    13b6:	11 f4       	brne	.+4      	; 0x13bc <__fp_round+0xc>
    13b8:	88 23       	and	r24, r24
    13ba:	52 f0       	brmi	.+20     	; 0x13d0 <__fp_round+0x20>
    13bc:	bb 0f       	add	r27, r27
    13be:	40 f4       	brcc	.+16     	; 0x13d0 <__fp_round+0x20>
    13c0:	bf 2b       	or	r27, r31
    13c2:	11 f4       	brne	.+4      	; 0x13c8 <__fp_round+0x18>
    13c4:	60 ff       	sbrs	r22, 0
    13c6:	04 c0       	rjmp	.+8      	; 0x13d0 <__fp_round+0x20>
    13c8:	6f 5f       	subi	r22, 0xFF	; 255
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	8f 4f       	sbci	r24, 0xFF	; 255
    13ce:	9f 4f       	sbci	r25, 0xFF	; 255
    13d0:	08 95       	ret

000013d2 <__fp_split3>:
    13d2:	57 fd       	sbrc	r21, 7
    13d4:	90 58       	subi	r25, 0x80	; 128
    13d6:	44 0f       	add	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	59 f0       	breq	.+22     	; 0x13f2 <__fp_splitA+0x10>
    13dc:	5f 3f       	cpi	r21, 0xFF	; 255
    13de:	71 f0       	breq	.+28     	; 0x13fc <__fp_splitA+0x1a>
    13e0:	47 95       	ror	r20

000013e2 <__fp_splitA>:
    13e2:	88 0f       	add	r24, r24
    13e4:	97 fb       	bst	r25, 7
    13e6:	99 1f       	adc	r25, r25
    13e8:	61 f0       	breq	.+24     	; 0x1402 <__fp_splitA+0x20>
    13ea:	9f 3f       	cpi	r25, 0xFF	; 255
    13ec:	79 f0       	breq	.+30     	; 0x140c <__fp_splitA+0x2a>
    13ee:	87 95       	ror	r24
    13f0:	08 95       	ret
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	14 06       	cpc	r1, r20
    13f8:	55 1f       	adc	r21, r21
    13fa:	f2 cf       	rjmp	.-28     	; 0x13e0 <__fp_split3+0xe>
    13fc:	46 95       	lsr	r20
    13fe:	f1 df       	rcall	.-30     	; 0x13e2 <__fp_splitA>
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <__fp_splitA+0x30>
    1402:	16 16       	cp	r1, r22
    1404:	17 06       	cpc	r1, r23
    1406:	18 06       	cpc	r1, r24
    1408:	99 1f       	adc	r25, r25
    140a:	f1 cf       	rjmp	.-30     	; 0x13ee <__fp_splitA+0xc>
    140c:	86 95       	lsr	r24
    140e:	71 05       	cpc	r23, r1
    1410:	61 05       	cpc	r22, r1
    1412:	08 94       	sec
    1414:	08 95       	ret

00001416 <__fp_zero>:
    1416:	e8 94       	clt

00001418 <__fp_szero>:
    1418:	bb 27       	eor	r27, r27
    141a:	66 27       	eor	r22, r22
    141c:	77 27       	eor	r23, r23
    141e:	cb 01       	movw	r24, r22
    1420:	97 f9       	bld	r25, 7
    1422:	08 95       	ret

00001424 <__mulsf3>:
    1424:	0b d0       	rcall	.+22     	; 0x143c <__mulsf3x>
    1426:	c4 cf       	rjmp	.-120    	; 0x13b0 <__fp_round>
    1428:	b5 df       	rcall	.-150    	; 0x1394 <__fp_pscA>
    142a:	28 f0       	brcs	.+10     	; 0x1436 <__mulsf3+0x12>
    142c:	ba df       	rcall	.-140    	; 0x13a2 <__fp_pscB>
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__mulsf3+0x12>
    1430:	95 23       	and	r25, r21
    1432:	09 f0       	breq	.+2      	; 0x1436 <__mulsf3+0x12>
    1434:	a6 cf       	rjmp	.-180    	; 0x1382 <__fp_inf>
    1436:	ab cf       	rjmp	.-170    	; 0x138e <__fp_nan>
    1438:	11 24       	eor	r1, r1
    143a:	ee cf       	rjmp	.-36     	; 0x1418 <__fp_szero>

0000143c <__mulsf3x>:
    143c:	ca df       	rcall	.-108    	; 0x13d2 <__fp_split3>
    143e:	a0 f3       	brcs	.-24     	; 0x1428 <__mulsf3+0x4>

00001440 <__mulsf3_pse>:
    1440:	95 9f       	mul	r25, r21
    1442:	d1 f3       	breq	.-12     	; 0x1438 <__mulsf3+0x14>
    1444:	95 0f       	add	r25, r21
    1446:	50 e0       	ldi	r21, 0x00	; 0
    1448:	55 1f       	adc	r21, r21
    144a:	62 9f       	mul	r22, r18
    144c:	f0 01       	movw	r30, r0
    144e:	72 9f       	mul	r23, r18
    1450:	bb 27       	eor	r27, r27
    1452:	f0 0d       	add	r31, r0
    1454:	b1 1d       	adc	r27, r1
    1456:	63 9f       	mul	r22, r19
    1458:	aa 27       	eor	r26, r26
    145a:	f0 0d       	add	r31, r0
    145c:	b1 1d       	adc	r27, r1
    145e:	aa 1f       	adc	r26, r26
    1460:	64 9f       	mul	r22, r20
    1462:	66 27       	eor	r22, r22
    1464:	b0 0d       	add	r27, r0
    1466:	a1 1d       	adc	r26, r1
    1468:	66 1f       	adc	r22, r22
    146a:	82 9f       	mul	r24, r18
    146c:	22 27       	eor	r18, r18
    146e:	b0 0d       	add	r27, r0
    1470:	a1 1d       	adc	r26, r1
    1472:	62 1f       	adc	r22, r18
    1474:	73 9f       	mul	r23, r19
    1476:	b0 0d       	add	r27, r0
    1478:	a1 1d       	adc	r26, r1
    147a:	62 1f       	adc	r22, r18
    147c:	83 9f       	mul	r24, r19
    147e:	a0 0d       	add	r26, r0
    1480:	61 1d       	adc	r22, r1
    1482:	22 1f       	adc	r18, r18
    1484:	74 9f       	mul	r23, r20
    1486:	33 27       	eor	r19, r19
    1488:	a0 0d       	add	r26, r0
    148a:	61 1d       	adc	r22, r1
    148c:	23 1f       	adc	r18, r19
    148e:	84 9f       	mul	r24, r20
    1490:	60 0d       	add	r22, r0
    1492:	21 1d       	adc	r18, r1
    1494:	82 2f       	mov	r24, r18
    1496:	76 2f       	mov	r23, r22
    1498:	6a 2f       	mov	r22, r26
    149a:	11 24       	eor	r1, r1
    149c:	9f 57       	subi	r25, 0x7F	; 127
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	8a f0       	brmi	.+34     	; 0x14c4 <__mulsf3_pse+0x84>
    14a2:	e1 f0       	breq	.+56     	; 0x14dc <__mulsf3_pse+0x9c>
    14a4:	88 23       	and	r24, r24
    14a6:	4a f0       	brmi	.+18     	; 0x14ba <__mulsf3_pse+0x7a>
    14a8:	ee 0f       	add	r30, r30
    14aa:	ff 1f       	adc	r31, r31
    14ac:	bb 1f       	adc	r27, r27
    14ae:	66 1f       	adc	r22, r22
    14b0:	77 1f       	adc	r23, r23
    14b2:	88 1f       	adc	r24, r24
    14b4:	91 50       	subi	r25, 0x01	; 1
    14b6:	50 40       	sbci	r21, 0x00	; 0
    14b8:	a9 f7       	brne	.-22     	; 0x14a4 <__mulsf3_pse+0x64>
    14ba:	9e 3f       	cpi	r25, 0xFE	; 254
    14bc:	51 05       	cpc	r21, r1
    14be:	70 f0       	brcs	.+28     	; 0x14dc <__mulsf3_pse+0x9c>
    14c0:	60 cf       	rjmp	.-320    	; 0x1382 <__fp_inf>
    14c2:	aa cf       	rjmp	.-172    	; 0x1418 <__fp_szero>
    14c4:	5f 3f       	cpi	r21, 0xFF	; 255
    14c6:	ec f3       	brlt	.-6      	; 0x14c2 <__mulsf3_pse+0x82>
    14c8:	98 3e       	cpi	r25, 0xE8	; 232
    14ca:	dc f3       	brlt	.-10     	; 0x14c2 <__mulsf3_pse+0x82>
    14cc:	86 95       	lsr	r24
    14ce:	77 95       	ror	r23
    14d0:	67 95       	ror	r22
    14d2:	b7 95       	ror	r27
    14d4:	f7 95       	ror	r31
    14d6:	e7 95       	ror	r30
    14d8:	9f 5f       	subi	r25, 0xFF	; 255
    14da:	c1 f7       	brne	.-16     	; 0x14cc <__mulsf3_pse+0x8c>
    14dc:	fe 2b       	or	r31, r30
    14de:	88 0f       	add	r24, r24
    14e0:	91 1d       	adc	r25, r1
    14e2:	96 95       	lsr	r25
    14e4:	87 95       	ror	r24
    14e6:	97 f9       	bld	r25, 7
    14e8:	08 95       	ret

000014ea <_exit>:
    14ea:	f8 94       	cli

000014ec <__stop_program>:
    14ec:	ff cf       	rjmp	.-2      	; 0x14ec <__stop_program>
